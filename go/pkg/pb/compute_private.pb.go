// This file contains PRIVATE services that are intended for IDC infrastructure (controllers)
// and trusted parties. It is not a part of the public API.
//
// After updating this file, run "make generate".
//
// See:
//  - https://protobuf.dev/programming-guides/proto3/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: compute_private.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WatchDeltaType int32

const (
	// Record has been created or updated.
	// This includes an update to the deletionTimestamp field which indicates the desire to delete the record.
	WatchDeltaType_Updated WatchDeltaType = 0
	// Record has been deleted.
	// It will no longer be represented in future InstanceWatchResponse messages.
	WatchDeltaType_Deleted WatchDeltaType = 1
	// Indicates that all updates up to and including the ResourceVersion have been sent.
	// The object contains only the ResourceVersion.
	WatchDeltaType_Bookmark WatchDeltaType = 3
)

// Enum value maps for WatchDeltaType.
var (
	WatchDeltaType_name = map[int32]string{
		0: "Updated",
		1: "Deleted",
		3: "Bookmark",
	}
	WatchDeltaType_value = map[string]int32{
		"Updated":  0,
		"Deleted":  1,
		"Bookmark": 3,
	}
)

func (x WatchDeltaType) Enum() *WatchDeltaType {
	p := new(WatchDeltaType)
	*p = x
	return p
}

func (x WatchDeltaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchDeltaType) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_private_proto_enumTypes[0].Descriptor()
}

func (WatchDeltaType) Type() protoreflect.EnumType {
	return &file_compute_private_proto_enumTypes[0]
}

func (x WatchDeltaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchDeltaType.Descriptor instead.
func (WatchDeltaType) EnumDescriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{0}
}

type InstanceServiceType int32

const (
	InstanceServiceType_ComputeAsAService        InstanceServiceType = 0
	InstanceServiceType_KubernetesAsAService     InstanceServiceType = 1
	InstanceServiceType_SuperComputingAsAService InstanceServiceType = 2
)

// Enum value maps for InstanceServiceType.
var (
	InstanceServiceType_name = map[int32]string{
		0: "ComputeAsAService",
		1: "KubernetesAsAService",
		2: "SuperComputingAsAService",
	}
	InstanceServiceType_value = map[string]int32{
		"ComputeAsAService":        0,
		"KubernetesAsAService":     1,
		"SuperComputingAsAService": 2,
	}
)

func (x InstanceServiceType) Enum() *InstanceServiceType {
	p := new(InstanceServiceType)
	*p = x
	return p
}

func (x InstanceServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_private_proto_enumTypes[1].Descriptor()
}

func (InstanceServiceType) Type() protoreflect.EnumType {
	return &file_compute_private_proto_enumTypes[1]
}

func (x InstanceServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceServiceType.Descriptor instead.
func (InstanceServiceType) EnumDescriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{1}
}

type GenerateAddressesMethod int32

const (
	// Generate standard addresses and gateway if address list is empty.
	GenerateAddressesMethod_Auto GenerateAddressesMethod = 0
	// Generate standard addresses and gateway.
	GenerateAddressesMethod_GenerateStandardHostAddresses GenerateAddressesMethod = 1
	// Do not generate addresses and gateway.
	GenerateAddressesMethod_NoGeneration GenerateAddressesMethod = 2
)

// Enum value maps for GenerateAddressesMethod.
var (
	GenerateAddressesMethod_name = map[int32]string{
		0: "Auto",
		1: "GenerateStandardHostAddresses",
		2: "NoGeneration",
	}
	GenerateAddressesMethod_value = map[string]int32{
		"Auto":                          0,
		"GenerateStandardHostAddresses": 1,
		"NoGeneration":                  2,
	}
)

func (x GenerateAddressesMethod) Enum() *GenerateAddressesMethod {
	p := new(GenerateAddressesMethod)
	*p = x
	return p
}

func (x GenerateAddressesMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateAddressesMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_private_proto_enumTypes[2].Descriptor()
}

func (GenerateAddressesMethod) Type() protoreflect.EnumType {
	return &file_compute_private_proto_enumTypes[2]
}

func (x GenerateAddressesMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateAddressesMethod.Descriptor instead.
func (GenerateAddressesMethod) EnumDescriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{2}
}

type LoadBalancerSearchStreamPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LoadBalancerSearchStreamPrivateRequest) Reset() {
	*x = LoadBalancerSearchStreamPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerSearchStreamPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSearchStreamPrivateRequest) ProtoMessage() {}

func (x *LoadBalancerSearchStreamPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSearchStreamPrivateRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerSearchStreamPrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{0}
}

type LoadBalancerWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceVersion string `protobuf:"bytes,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *LoadBalancerWatchRequest) Reset() {
	*x = LoadBalancerWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerWatchRequest) ProtoMessage() {}

func (x *LoadBalancerWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerWatchRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerWatchRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{1}
}

func (x *LoadBalancerWatchRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

// Private only.
type LoadBalancerWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   WatchDeltaType       `protobuf:"varint,1,opt,name=type,proto3,enum=proto.WatchDeltaType" json:"type,omitempty"`
	Object *LoadBalancerPrivate `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *LoadBalancerWatchResponse) Reset() {
	*x = LoadBalancerWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerWatchResponse) ProtoMessage() {}

func (x *LoadBalancerWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerWatchResponse.ProtoReflect.Descriptor instead.
func (*LoadBalancerWatchResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{2}
}

func (x *LoadBalancerWatchResponse) GetType() WatchDeltaType {
	if x != nil {
		return x.Type
	}
	return WatchDeltaType_Updated
}

func (x *LoadBalancerWatchResponse) GetObject() *LoadBalancerPrivate {
	if x != nil {
		return x.Object
	}
	return nil
}

type InstanceCreatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataCreatePrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceSpecPrivate           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *InstanceCreatePrivateRequest) Reset() {
	*x = InstanceCreatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceCreatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceCreatePrivateRequest) ProtoMessage() {}

func (x *InstanceCreatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceCreatePrivateRequest.ProtoReflect.Descriptor instead.
func (*InstanceCreatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{3}
}

func (x *InstanceCreatePrivateRequest) GetMetadata() *InstanceMetadataCreatePrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceCreatePrivateRequest) GetSpec() *InstanceSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type InstanceMetadataCreatePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Name will be generated if empty. Optional.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// If provided, this must be a UUID. Optional,
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// Not implemented.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If true, quota check will be skipped
	SkipQuotaCheck bool `protobuf:"varint,5,opt,name=skipQuotaCheck,proto3" json:"skipQuotaCheck,omitempty"`
}

func (x *InstanceMetadataCreatePrivate) Reset() {
	*x = InstanceMetadataCreatePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMetadataCreatePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMetadataCreatePrivate) ProtoMessage() {}

func (x *InstanceMetadataCreatePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMetadataCreatePrivate.ProtoReflect.Descriptor instead.
func (*InstanceMetadataCreatePrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{4}
}

func (x *InstanceMetadataCreatePrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceMetadataCreatePrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceMetadataCreatePrivate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceMetadataCreatePrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InstanceMetadataCreatePrivate) GetSkipQuotaCheck() bool {
	if x != nil {
		return x.SkipQuotaCheck
	}
	return false
}

type InstanceCreateMultiplePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*InstanceCreatePrivateRequest `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	DryRun    bool                            `protobuf:"varint,2,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
}

func (x *InstanceCreateMultiplePrivateRequest) Reset() {
	*x = InstanceCreateMultiplePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceCreateMultiplePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceCreateMultiplePrivateRequest) ProtoMessage() {}

func (x *InstanceCreateMultiplePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceCreateMultiplePrivateRequest.ProtoReflect.Descriptor instead.
func (*InstanceCreateMultiplePrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{5}
}

func (x *InstanceCreateMultiplePrivateRequest) GetInstances() []*InstanceCreatePrivateRequest {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *InstanceCreateMultiplePrivateRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type InstanceCreateMultiplePrivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*InstancePrivate `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *InstanceCreateMultiplePrivateResponse) Reset() {
	*x = InstanceCreateMultiplePrivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceCreateMultiplePrivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceCreateMultiplePrivateResponse) ProtoMessage() {}

func (x *InstanceCreateMultiplePrivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceCreateMultiplePrivateResponse.ProtoReflect.Descriptor instead.
func (*InstanceCreateMultiplePrivateResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{6}
}

func (x *InstanceCreateMultiplePrivateResponse) GetInstances() []*InstancePrivate {
	if x != nil {
		return x.Instances
	}
	return nil
}

type InstanceUpdateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceIdReference   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *InstanceStatusPrivate `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InstanceUpdateStatusRequest) Reset() {
	*x = InstanceUpdateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceUpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceUpdateStatusRequest) ProtoMessage() {}

func (x *InstanceUpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceUpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*InstanceUpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{7}
}

func (x *InstanceUpdateStatusRequest) GetMetadata() *InstanceIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceUpdateStatusRequest) GetStatus() *InstanceStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type InstanceUpdatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataUpdate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceSpecPrivate    `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *InstanceUpdatePrivateRequest) Reset() {
	*x = InstanceUpdatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceUpdatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceUpdatePrivateRequest) ProtoMessage() {}

func (x *InstanceUpdatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceUpdatePrivateRequest.ProtoReflect.Descriptor instead.
func (*InstanceUpdatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{8}
}

func (x *InstanceUpdatePrivateRequest) GetMetadata() *InstanceMetadataUpdate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceUpdatePrivateRequest) GetSpec() *InstanceSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type InstanceSearchPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataSearch `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceSearchPrivateRequest) Reset() {
	*x = InstanceSearchPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSearchPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSearchPrivateRequest) ProtoMessage() {}

func (x *InstanceSearchPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSearchPrivateRequest.ProtoReflect.Descriptor instead.
func (*InstanceSearchPrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{9}
}

func (x *InstanceSearchPrivateRequest) GetMetadata() *InstanceMetadataSearch {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceSearchPrivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*InstancePrivate `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *InstanceSearchPrivateResponse) Reset() {
	*x = InstanceSearchPrivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSearchPrivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSearchPrivateResponse) ProtoMessage() {}

func (x *InstanceSearchPrivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSearchPrivateResponse.ProtoReflect.Descriptor instead.
func (*InstanceSearchPrivateResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{10}
}

func (x *InstanceSearchPrivateResponse) GetItems() []*InstancePrivate {
	if x != nil {
		return x.Items
	}
	return nil
}

type InstanceSearchStreamPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstanceSearchStreamPrivateRequest) Reset() {
	*x = InstanceSearchStreamPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSearchStreamPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSearchStreamPrivateRequest) ProtoMessage() {}

func (x *InstanceSearchStreamPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSearchStreamPrivateRequest.ProtoReflect.Descriptor instead.
func (*InstanceSearchStreamPrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{11}
}

type InstanceWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceVersion string `protobuf:"bytes,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *InstanceWatchRequest) Reset() {
	*x = InstanceWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceWatchRequest) ProtoMessage() {}

func (x *InstanceWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceWatchRequest.ProtoReflect.Descriptor instead.
func (*InstanceWatchRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{12}
}

func (x *InstanceWatchRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

// Private only.
type InstanceWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   WatchDeltaType   `protobuf:"varint,1,opt,name=type,proto3,enum=proto.WatchDeltaType" json:"type,omitempty"`
	Object *InstancePrivate `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *InstanceWatchResponse) Reset() {
	*x = InstanceWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceWatchResponse) ProtoMessage() {}

func (x *InstanceWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceWatchResponse.ProtoReflect.Descriptor instead.
func (*InstanceWatchResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{13}
}

func (x *InstanceWatchResponse) GetType() WatchDeltaType {
	if x != nil {
		return x.Type
	}
	return WatchDeltaType_Updated
}

func (x *InstanceWatchResponse) GetObject() *InstancePrivate {
	if x != nil {
		return x.Object
	}
	return nil
}

type InstanceRemoveFinalizerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceIdReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceRemoveFinalizerRequest) Reset() {
	*x = InstanceRemoveFinalizerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceRemoveFinalizerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceRemoveFinalizerRequest) ProtoMessage() {}

func (x *InstanceRemoveFinalizerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceRemoveFinalizerRequest.ProtoReflect.Descriptor instead.
func (*InstanceRemoveFinalizerRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{14}
}

func (x *InstanceRemoveFinalizerRequest) GetMetadata() *InstanceIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceIdReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ResourceId     string `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *InstanceIdReference) Reset() {
	*x = InstanceIdReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceIdReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceIdReference) ProtoMessage() {}

func (x *InstanceIdReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceIdReference.ProtoReflect.Descriptor instead.
func (*InstanceIdReference) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{15}
}

func (x *InstanceIdReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceIdReference) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceIdReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

// This message (and contained messages) must remain compatible with Instance.
// In particular, an InstancePrivate binary Protobuf message must be deserializable as an Instance.
type InstancePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *InstanceStatusPrivate   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InstancePrivate) Reset() {
	*x = InstancePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancePrivate) ProtoMessage() {}

func (x *InstancePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancePrivate.ProtoReflect.Descriptor instead.
func (*InstancePrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{16}
}

func (x *InstancePrivate) GetMetadata() *InstanceMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstancePrivate) GetSpec() *InstanceSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *InstancePrivate) GetStatus() *InstanceStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type InstanceMetadataPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	// This is also used by TopologySpreadConstraints.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Not implemented.
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
	// Timestamp when resource was deleted.
	DeletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deletedTimestamp,proto3" json:"deletedTimestamp,omitempty"`
	// If true, quota check will be skipped
	SkipQuotaCheck bool `protobuf:"varint,9,opt,name=skipQuotaCheck,proto3" json:"skipQuotaCheck,omitempty"`
}

func (x *InstanceMetadataPrivate) Reset() {
	*x = InstanceMetadataPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMetadataPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMetadataPrivate) ProtoMessage() {}

func (x *InstanceMetadataPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMetadataPrivate.ProtoReflect.Descriptor instead.
func (*InstanceMetadataPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceMetadataPrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceMetadataPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceMetadataPrivate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceMetadataPrivate) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *InstanceMetadataPrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InstanceMetadataPrivate) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *InstanceMetadataPrivate) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

func (x *InstanceMetadataPrivate) GetDeletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedTimestamp
	}
	return nil
}

func (x *InstanceMetadataPrivate) GetSkipQuotaCheck() bool {
	if x != nil {
		return x.SkipQuotaCheck
	}
	return false
}

type InstanceDeletePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceDeletePrivateRequest) Reset() {
	*x = InstanceDeletePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceDeletePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceDeletePrivateRequest) ProtoMessage() {}

func (x *InstanceDeletePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceDeletePrivateRequest.ProtoReflect.Descriptor instead.
func (*InstanceDeletePrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{18}
}

func (x *InstanceDeletePrivateRequest) GetMetadata() *InstanceMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceSpecPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not implemented.
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The name of an InstanceType.
	InstanceType string `protobuf:"bytes,2,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	// The name of a MachineImage.
	// Not implemented.
	MachineImage string `protobuf:"bytes,3,opt,name=machineImage,proto3" json:"machineImage,omitempty"`
	// Controls the instance power state.
	RunStrategy RunStrategy `protobuf:"varint,4,opt,name=runStrategy,proto3,enum=proto.RunStrategy" json:"runStrategy,omitempty"`
	// The name of a previously stored SSH public key.
	// Users can use the corresponding SSH private key to SSH to this instance.
	SshPublicKeyNames []string `protobuf:"bytes,5,rep,name=sshPublicKeyNames,proto3" json:"sshPublicKeyNames,omitempty"`
	// Not implemented.
	Interfaces []*NetworkInterfacePrivate `protobuf:"bytes,6,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// This controls how instances are spread across the failure domains within the availability zone.
	// This can help to achieve high availability.
	// If this contains at least one key/value pair in matchLabels, then instances that have all of these key/value pairs
	// will be placed evenly across failure domains.
	TopologySpreadConstraints []*TopologySpreadConstraints `protobuf:"bytes,15,rep,name=topologySpreadConstraints,proto3" json:"topologySpreadConstraints,omitempty"`
	// The cloud-config for this instance
	UserData string `protobuf:"bytes,17,opt,name=userData,proto3" json:"userData,omitempty"`
	// If not empty, this instance is part of the named instance group.
	InstanceGroup string `protobuf:"bytes,18,opt,name=instanceGroup,proto3" json:"instanceGroup,omitempty"`
	// Number of instances in the instance group.
	InstanceGroupSize int32 `protobuf:"varint,19,opt,name=instanceGroupSize,proto3" json:"instanceGroupSize,omitempty"`
	// If True, Quick Connect will be enabled.
	// If False, Quick Connect will be disabled.
	// If Undefined during instance creation, Quick Connect will be disabled.
	// If Undefined during instance update, the Quick Connect state will be unchanged.
	QuickConnectEnabled TriState `protobuf:"varint,22,opt,name=quickConnectEnabled,proto3,enum=proto.TriState" json:"quickConnectEnabled,omitempty"`
	// Private only.
	InstanceTypeSpec *InstanceTypeSpec `protobuf:"bytes,7,opt,name=instanceTypeSpec,proto3" json:"instanceTypeSpec,omitempty"`
	// Private only.
	MachineImageSpec *MachineImageSpec `protobuf:"bytes,8,opt,name=machineImageSpec,proto3" json:"machineImageSpec,omitempty"`
	// Expected to be in the same order as sshPublicKeyNames.
	// Private only.
	SshPublicKeySpecs []*SshPublicKeySpec `protobuf:"bytes,9,rep,name=sshPublicKeySpecs,proto3" json:"sshPublicKeySpecs,omitempty"`
	// Not implemented.
	// Private only.
	ClusterGroupId string `protobuf:"bytes,10,opt,name=clusterGroupId,proto3" json:"clusterGroupId,omitempty"`
	// For VM instances, the ID of the Harvester cluster that this instance should run on.
	// Private only.
	ClusterId string `protobuf:"bytes,11,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	// Private only
	Region string `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	// For VM instances, the ID of the Harvester node that this instance should run on.
	// Private only.
	NodeId string `protobuf:"bytes,13,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// Private only.
	ServiceType InstanceServiceType `protobuf:"varint,14,opt,name=serviceType,proto3,enum=proto.InstanceServiceType" json:"serviceType,omitempty"`
	// Private only.
	// The partition within the region/availabilityZone/clusterGroupId/clusterId.
	// Nodes in different partitions do not share underlying hardware.
	// The partition must be unique within the region.
	Partition string `protobuf:"bytes,16,opt,name=partition,proto3" json:"partition,omitempty"`
	// Private only.
	// This is a list of zero or more compute node pool IDs.
	// When this field is passed to InstancePrivateService.CreatePrivate:
	//   - The CreatePrivate RPC first identifies the compute node pools that the Cloud Account is authorized for
	//     by calling FleetAdminService.SearchComputeNodePoolsForInstanceScheduling.
	//   - If this field has one or more elements, then the authorized compute node pools are filtered.
	//
	// When this field is passed to InstanceSchedulingService.Schedule:
	//   - If this field has one or more elements, the instance will be scheduled on a node labeled with at least one of these compute node pool IDs.
	//   - If this field has no elements, instance scheduling will not consider these node labels.
	//
	// When this field is stored in the compute database:
	//   - This field is the intersection of the compute node pools passed to the scheduler (authorized and filtered)
	//     and the compute node pools that the selected node was labeled with at the time of instance creation.
	ComputeNodePools []string `protobuf:"bytes,20,rep,name=computeNodePools,proto3" json:"computeNodePools,omitempty"`
	// Private only.
	// The network mode for the instance.
	NetworkMode string `protobuf:"bytes,21,opt,name=networkMode,proto3" json:"networkMode,omitempty"`
	// Private only.
	// The ID of the compute group that this instance should run on.
	SuperComputeGroupId string `protobuf:"bytes,23,opt,name=superComputeGroupId,proto3" json:"superComputeGroupId,omitempty"`
}

func (x *InstanceSpecPrivate) Reset() {
	*x = InstanceSpecPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSpecPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSpecPrivate) ProtoMessage() {}

func (x *InstanceSpecPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSpecPrivate.ProtoReflect.Descriptor instead.
func (*InstanceSpecPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceSpecPrivate) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *InstanceSpecPrivate) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *InstanceSpecPrivate) GetMachineImage() string {
	if x != nil {
		return x.MachineImage
	}
	return ""
}

func (x *InstanceSpecPrivate) GetRunStrategy() RunStrategy {
	if x != nil {
		return x.RunStrategy
	}
	return RunStrategy_RerunOnFailure
}

func (x *InstanceSpecPrivate) GetSshPublicKeyNames() []string {
	if x != nil {
		return x.SshPublicKeyNames
	}
	return nil
}

func (x *InstanceSpecPrivate) GetInterfaces() []*NetworkInterfacePrivate {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *InstanceSpecPrivate) GetTopologySpreadConstraints() []*TopologySpreadConstraints {
	if x != nil {
		return x.TopologySpreadConstraints
	}
	return nil
}

func (x *InstanceSpecPrivate) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *InstanceSpecPrivate) GetInstanceGroup() string {
	if x != nil {
		return x.InstanceGroup
	}
	return ""
}

func (x *InstanceSpecPrivate) GetInstanceGroupSize() int32 {
	if x != nil {
		return x.InstanceGroupSize
	}
	return 0
}

func (x *InstanceSpecPrivate) GetQuickConnectEnabled() TriState {
	if x != nil {
		return x.QuickConnectEnabled
	}
	return TriState_Undefined
}

func (x *InstanceSpecPrivate) GetInstanceTypeSpec() *InstanceTypeSpec {
	if x != nil {
		return x.InstanceTypeSpec
	}
	return nil
}

func (x *InstanceSpecPrivate) GetMachineImageSpec() *MachineImageSpec {
	if x != nil {
		return x.MachineImageSpec
	}
	return nil
}

func (x *InstanceSpecPrivate) GetSshPublicKeySpecs() []*SshPublicKeySpec {
	if x != nil {
		return x.SshPublicKeySpecs
	}
	return nil
}

func (x *InstanceSpecPrivate) GetClusterGroupId() string {
	if x != nil {
		return x.ClusterGroupId
	}
	return ""
}

func (x *InstanceSpecPrivate) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *InstanceSpecPrivate) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *InstanceSpecPrivate) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *InstanceSpecPrivate) GetServiceType() InstanceServiceType {
	if x != nil {
		return x.ServiceType
	}
	return InstanceServiceType_ComputeAsAService
}

func (x *InstanceSpecPrivate) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *InstanceSpecPrivate) GetComputeNodePools() []string {
	if x != nil {
		return x.ComputeNodePools
	}
	return nil
}

func (x *InstanceSpecPrivate) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

func (x *InstanceSpecPrivate) GetSuperComputeGroupId() string {
	if x != nil {
		return x.SuperComputeGroupId
	}
	return ""
}

type NetworkInterfacePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the network interface as known by the operating system.
	// Not implemented.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the VNet that the network interface connects to.
	VNet string `protobuf:"bytes,2,opt,name=vNet,proto3" json:"vNet,omitempty"`
	// Fully qualified domain name (FQDN) of interface.
	// Private only.
	DnsName string `protobuf:"bytes,3,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	// Private only
	Nameservers []string `protobuf:"bytes,5,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
}

func (x *NetworkInterfacePrivate) Reset() {
	*x = NetworkInterfacePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterfacePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfacePrivate) ProtoMessage() {}

func (x *NetworkInterfacePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfacePrivate.ProtoReflect.Descriptor instead.
func (*NetworkInterfacePrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkInterfacePrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterfacePrivate) GetVNet() string {
	if x != nil {
		return x.VNet
	}
	return ""
}

func (x *NetworkInterfacePrivate) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *NetworkInterfacePrivate) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

type InstanceStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instance phase.
	Phase InstancePhase `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.InstancePhase" json:"phase,omitempty"`
	// Additional details about the state or any error conditions.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A list of network interfaces, along with the private IP address assigned to the interface.
	Interfaces []*InstanceInterfaceStatusPrivate `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Parameters required to connect to the SSH proxy.
	SshProxy *SshProxyTunnelStatus `protobuf:"bytes,4,opt,name=sshProxy,proto3" json:"sshProxy,omitempty"`
	// The user name that should be used to SSH into the instance.
	UserName string `protobuf:"bytes,5,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *InstanceStatusPrivate) Reset() {
	*x = InstanceStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatusPrivate) ProtoMessage() {}

func (x *InstanceStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatusPrivate.ProtoReflect.Descriptor instead.
func (*InstanceStatusPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{21}
}

func (x *InstanceStatusPrivate) GetPhase() InstancePhase {
	if x != nil {
		return x.Phase
	}
	return InstancePhase_Provisioning
}

func (x *InstanceStatusPrivate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstanceStatusPrivate) GetInterfaces() []*InstanceInterfaceStatusPrivate {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *InstanceStatusPrivate) GetSshProxy() *SshProxyTunnelStatus {
	if x != nil {
		return x.SshProxy
	}
	return nil
}

func (x *InstanceStatusPrivate) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type InstanceInterfaceStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not implemented.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the VNet that the network interface connects to.
	VNet string `protobuf:"bytes,2,opt,name=vNet,proto3" json:"vNet,omitempty"`
	// Fully qualified domain name (FQDN) of interface.
	DnsName string `protobuf:"bytes,3,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	// Subnet prefix length.
	PrefixLength int32 `protobuf:"varint,4,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	// List of IP addresses.
	Addresses []string `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Subnet IP address in format "1.2.3.4".
	Subnet string `protobuf:"bytes,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// Gateway IP address.
	Gateway string `protobuf:"bytes,7,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// VLAN ID.
	VlanId int32 `protobuf:"varint,8,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
}

func (x *InstanceInterfaceStatusPrivate) Reset() {
	*x = InstanceInterfaceStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInterfaceStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInterfaceStatusPrivate) ProtoMessage() {}

func (x *InstanceInterfaceStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInterfaceStatusPrivate.ProtoReflect.Descriptor instead.
func (*InstanceInterfaceStatusPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{22}
}

func (x *InstanceInterfaceStatusPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceInterfaceStatusPrivate) GetVNet() string {
	if x != nil {
		return x.VNet
	}
	return ""
}

func (x *InstanceInterfaceStatusPrivate) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *InstanceInterfaceStatusPrivate) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *InstanceInterfaceStatusPrivate) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *InstanceInterfaceStatusPrivate) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *InstanceInterfaceStatusPrivate) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *InstanceInterfaceStatusPrivate) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type InstanceGroupCreatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadataCreatePrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceGroupSpecPrivate           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// If true, the instances will not be created.
	DryRun bool `protobuf:"varint,3,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
}

func (x *InstanceGroupCreatePrivateRequest) Reset() {
	*x = InstanceGroupCreatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupCreatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupCreatePrivateRequest) ProtoMessage() {}

func (x *InstanceGroupCreatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupCreatePrivateRequest.ProtoReflect.Descriptor instead.
func (*InstanceGroupCreatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{23}
}

func (x *InstanceGroupCreatePrivateRequest) GetMetadata() *InstanceGroupMetadataCreatePrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceGroupCreatePrivateRequest) GetSpec() *InstanceGroupSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *InstanceGroupCreatePrivateRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type InstanceGroupMetadataCreatePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Name of the instance group.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Not implemented.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If true, quota check will be skipped
	SkipQuotaCheck bool `protobuf:"varint,4,opt,name=skipQuotaCheck,proto3" json:"skipQuotaCheck,omitempty"`
}

func (x *InstanceGroupMetadataCreatePrivate) Reset() {
	*x = InstanceGroupMetadataCreatePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupMetadataCreatePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupMetadataCreatePrivate) ProtoMessage() {}

func (x *InstanceGroupMetadataCreatePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupMetadataCreatePrivate.ProtoReflect.Descriptor instead.
func (*InstanceGroupMetadataCreatePrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{24}
}

func (x *InstanceGroupMetadataCreatePrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceGroupMetadataCreatePrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceGroupMetadataCreatePrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InstanceGroupMetadataCreatePrivate) GetSkipQuotaCheck() bool {
	if x != nil {
		return x.SkipQuotaCheck
	}
	return false
}

type InstanceGroupSpecPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of instances in the instance group.
	InstanceCount int32 `protobuf:"varint,1,opt,name=instanceCount,proto3" json:"instanceCount,omitempty"`
	// The specification of the instances in the instance group.
	InstanceSpecPrivate *InstanceSpecPrivate `protobuf:"bytes,2,opt,name=instanceSpecPrivate,proto3" json:"instanceSpecPrivate,omitempty"`
	// The desired locations of instances in the instance group.
	// Effective only for superComputeGroupIds if specified.
	Placement *InstanceGroupPlacement `protobuf:"bytes,3,opt,name=placement,proto3" json:"placement,omitempty"`
}

func (x *InstanceGroupSpecPrivate) Reset() {
	*x = InstanceGroupSpecPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupSpecPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupSpecPrivate) ProtoMessage() {}

func (x *InstanceGroupSpecPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupSpecPrivate.ProtoReflect.Descriptor instead.
func (*InstanceGroupSpecPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{25}
}

func (x *InstanceGroupSpecPrivate) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *InstanceGroupSpecPrivate) GetInstanceSpecPrivate() *InstanceSpecPrivate {
	if x != nil {
		return x.InstanceSpecPrivate
	}
	return nil
}

func (x *InstanceGroupSpecPrivate) GetPlacement() *InstanceGroupPlacement {
	if x != nil {
		return x.Placement
	}
	return nil
}

type InstanceGroupPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target locations of supercompute clusters within an availability zone in which the instances may be created.
	// Multiple locations can be specified but the instances can be created in a single supercompute location.
	SuperComputeGroupIds []string `protobuf:"bytes,1,rep,name=superComputeGroupIds,proto3" json:"superComputeGroupIds,omitempty"`
	// The group IDs of clusters in which the instances may be placed.
	ClusterGroupIds []string `protobuf:"bytes,2,rep,name=clusterGroupIds,proto3" json:"clusterGroupIds,omitempty"`
	// The cluster IDs in which the instances may be placed.
	ClusterIds []string `protobuf:"bytes,3,rep,name=clusterIds,proto3" json:"clusterIds,omitempty"`
	// The node IDs that the instances may consume.
	NodeIds []string `protobuf:"bytes,4,rep,name=nodeIds,proto3" json:"nodeIds,omitempty"`
}

func (x *InstanceGroupPlacement) Reset() {
	*x = InstanceGroupPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupPlacement) ProtoMessage() {}

func (x *InstanceGroupPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupPlacement.ProtoReflect.Descriptor instead.
func (*InstanceGroupPlacement) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{26}
}

func (x *InstanceGroupPlacement) GetSuperComputeGroupIds() []string {
	if x != nil {
		return x.SuperComputeGroupIds
	}
	return nil
}

func (x *InstanceGroupPlacement) GetClusterGroupIds() []string {
	if x != nil {
		return x.ClusterGroupIds
	}
	return nil
}

func (x *InstanceGroupPlacement) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *InstanceGroupPlacement) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

type InstanceGroupPrivateCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *InstanceGroupMetadataCreatePrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Placement *InstanceGroupPlacement             `protobuf:"bytes,2,opt,name=placement,proto3" json:"placement,omitempty"`
	Instances []*InstancePrivate                  `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *InstanceGroupPrivateCreateResponse) Reset() {
	*x = InstanceGroupPrivateCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupPrivateCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupPrivateCreateResponse) ProtoMessage() {}

func (x *InstanceGroupPrivateCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupPrivateCreateResponse.ProtoReflect.Descriptor instead.
func (*InstanceGroupPrivateCreateResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{27}
}

func (x *InstanceGroupPrivateCreateResponse) GetMetadata() *InstanceGroupMetadataCreatePrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceGroupPrivateCreateResponse) GetPlacement() *InstanceGroupPlacement {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *InstanceGroupPrivateCreateResponse) GetInstances() []*InstancePrivate {
	if x != nil {
		return x.Instances
	}
	return nil
}

type ScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*InstancePrivate `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	// If true, the resources will not be reserved.
	DryRun bool `protobuf:"varint,2,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{28}
}

func (x *ScheduleRequest) GetInstances() []*InstancePrivate {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *ScheduleRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type ScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceResults []*ScheduleInstanceResult `protobuf:"bytes,1,rep,name=instanceResults,proto3" json:"instanceResults,omitempty"`
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{29}
}

func (x *ScheduleResponse) GetInstanceResults() []*ScheduleInstanceResult {
	if x != nil {
		return x.InstanceResults
	}
	return nil
}

type ScheduleInstanceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	NodeId    string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// If the schedule request had a non-empty TopologySpreadConstraints,
	// this will contain the partition that the instance must run on.
	Partition string `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty"`
	GroupId   string `protobuf:"bytes,4,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Intersection of compute node pool IDs in the request and those in the recommended node.
	ComputeNodePools    []string `protobuf:"bytes,5,rep,name=computeNodePools,proto3" json:"computeNodePools,omitempty"`
	NetworkMode         string   `protobuf:"bytes,6,opt,name=networkMode,proto3" json:"networkMode,omitempty"`
	SuperComputeGroupId string   `protobuf:"bytes,7,opt,name=superComputeGroupId,proto3" json:"superComputeGroupId,omitempty"`
}

func (x *ScheduleInstanceResult) Reset() {
	*x = ScheduleInstanceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleInstanceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInstanceResult) ProtoMessage() {}

func (x *ScheduleInstanceResult) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInstanceResult.ProtoReflect.Descriptor instead.
func (*ScheduleInstanceResult) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{30}
}

func (x *ScheduleInstanceResult) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ScheduleInstanceResult) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ScheduleInstanceResult) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *ScheduleInstanceResult) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ScheduleInstanceResult) GetComputeNodePools() []string {
	if x != nil {
		return x.ComputeNodePools
	}
	return nil
}

func (x *ScheduleInstanceResult) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

func (x *ScheduleInstanceResult) GetSuperComputeGroupId() string {
	if x != nil {
		return x.SuperComputeGroupId
	}
	return ""
}

type CreateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region           string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// Corresponds to the address space in Men & Mice.
	// Used to allow overlapping subnets in an availability zone.
	// This can be empty.
	AddressSpace string `protobuf:"bytes,3,opt,name=addressSpace,proto3" json:"addressSpace,omitempty"`
	// Subnet IP address with optional prefix length.
	// Can be in CIDR format "1.2.3.4" or non-CIDR "1.2.3.4/24".
	Subnet string `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// If zero, use prefix length in subnet.
	PrefixLength int32 `protobuf:"varint,5,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	// Gateway IP address.
	// Can be generated based on generateAddressesMethod.
	Gateway                 string                  `protobuf:"bytes,6,opt,name=gateway,proto3" json:"gateway,omitempty"`
	VlanId                  int32                   `protobuf:"varint,7,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	GenerateAddressesMethod GenerateAddressesMethod `protobuf:"varint,8,opt,name=generateAddressesMethod,proto3,enum=proto.GenerateAddressesMethod" json:"generateAddressesMethod,omitempty"`
	// The list of IP addresses in this subnet, in format "1.2.3.4".
	// Can be generated based on generateAddressesMethod.
	Address    []string `protobuf:"bytes,9,rep,name=address,proto3" json:"address,omitempty"`
	VlanDomain string   `protobuf:"bytes,10,opt,name=vlanDomain,proto3" json:"vlanDomain,omitempty"`
}

func (x *CreateSubnetRequest) Reset() {
	*x = CreateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnetRequest) ProtoMessage() {}

func (x *CreateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnetRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{31}
}

func (x *CreateSubnetRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateSubnetRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *CreateSubnetRequest) GetAddressSpace() string {
	if x != nil {
		return x.AddressSpace
	}
	return ""
}

func (x *CreateSubnetRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateSubnetRequest) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *CreateSubnetRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *CreateSubnetRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *CreateSubnetRequest) GetGenerateAddressesMethod() GenerateAddressesMethod {
	if x != nil {
		return x.GenerateAddressesMethod
	}
	return GenerateAddressesMethod_Auto
}

func (x *CreateSubnetRequest) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CreateSubnetRequest) GetVlanDomain() string {
	if x != nil {
		return x.VlanDomain
	}
	return ""
}

type CreateSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSubnetResponse) Reset() {
	*x = CreateSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnetResponse) ProtoMessage() {}

func (x *CreateSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnetResponse.ProtoReflect.Descriptor instead.
func (*CreateSubnetResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{32}
}

type DeleteSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region           string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// Corresponds to the address space in Men & Mice.
	// Used to allow overlapping subnets in an availability zone.
	// This can be empty.
	AddressSpace string `protobuf:"bytes,3,opt,name=addressSpace,proto3" json:"addressSpace,omitempty"`
	// Subnet IP address with optional prefix length.
	// Can be in CIDR format "1.2.3.4" or non-CIDR "1.2.3.4/24".
	Subnet string `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// If zero, use prefix length in subnet.
	PrefixLength int32 `protobuf:"varint,5,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
}

func (x *DeleteSubnetRequest) Reset() {
	*x = DeleteSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetRequest) ProtoMessage() {}

func (x *DeleteSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubnetRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteSubnetRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DeleteSubnetRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *DeleteSubnetRequest) GetAddressSpace() string {
	if x != nil {
		return x.AddressSpace
	}
	return ""
}

func (x *DeleteSubnetRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DeleteSubnetRequest) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type SearchSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchSubnetRequest) Reset() {
	*x = SearchSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubnetRequest) ProtoMessage() {}

func (x *SearchSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubnetRequest.ProtoReflect.Descriptor instead.
func (*SearchSubnetRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{34}
}

type ReserveSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetReference *SubnetReference           `protobuf:"bytes,1,opt,name=subnetReference,proto3" json:"subnetReference,omitempty"`
	Spec            *ReserveSubnetRequest_Spec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *ReserveSubnetRequest) Reset() {
	*x = ReserveSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveSubnetRequest) ProtoMessage() {}

func (x *ReserveSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveSubnetRequest.ProtoReflect.Descriptor instead.
func (*ReserveSubnetRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{35}
}

func (x *ReserveSubnetRequest) GetSubnetReference() *SubnetReference {
	if x != nil {
		return x.SubnetReference
	}
	return nil
}

func (x *ReserveSubnetRequest) GetSpec() *ReserveSubnetRequest_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ReleaseSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetReference *SubnetReference `protobuf:"bytes,1,opt,name=subnetReference,proto3" json:"subnetReference,omitempty"`
}

func (x *ReleaseSubnetRequest) Reset() {
	*x = ReleaseSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSubnetRequest) ProtoMessage() {}

func (x *ReleaseSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSubnetRequest.ProtoReflect.Descriptor instead.
func (*ReleaseSubnetRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{36}
}

func (x *ReleaseSubnetRequest) GetSubnetReference() *SubnetReference {
	if x != nil {
		return x.SubnetReference
	}
	return nil
}

type SubnetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user-defined string that uniquely identifies this consumed subnet.
	// For example, VNets use the pattern "{resourceId}.{cloudAccountId}.vnet".
	SubnetConsumerId string `protobuf:"bytes,1,opt,name=subnetConsumerId,proto3" json:"subnetConsumerId,omitempty"`
}

func (x *SubnetReference) Reset() {
	*x = SubnetReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetReference) ProtoMessage() {}

func (x *SubnetReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetReference.ProtoReflect.Descriptor instead.
func (*SubnetReference) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{37}
}

func (x *SubnetReference) GetSubnetConsumerId() string {
	if x != nil {
		return x.SubnetConsumerId
	}
	return ""
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region           string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	AddressSpace     string `protobuf:"bytes,8,opt,name=addressSpace,proto3" json:"addressSpace,omitempty"`
	// Subnet in format "1.2.3.0".
	Subnet       string `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	PrefixLength int32  `protobuf:"varint,4,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	// Gateway in format "1.2.3.1".
	Gateway          string `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	VlanId           int32  `protobuf:"varint,6,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	VlanDomain       string `protobuf:"bytes,9,opt,name=vlanDomain,proto3" json:"vlanDomain,omitempty"`
	SubnetConsumerId string `protobuf:"bytes,7,opt,name=subnetConsumerId,proto3" json:"subnetConsumerId,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{38}
}

func (x *Subnet) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Subnet) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *Subnet) GetAddressSpace() string {
	if x != nil {
		return x.AddressSpace
	}
	return ""
}

func (x *Subnet) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Subnet) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Subnet) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Subnet) GetVlanDomain() string {
	if x != nil {
		return x.VlanDomain
	}
	return ""
}

func (x *Subnet) GetSubnetConsumerId() string {
	if x != nil {
		return x.SubnetConsumerId
	}
	return ""
}

type ReserveAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetReference  *SubnetReference  `protobuf:"bytes,1,opt,name=subnetReference,proto3" json:"subnetReference,omitempty"`
	AddressReference *AddressReference `protobuf:"bytes,2,opt,name=addressReference,proto3" json:"addressReference,omitempty"`
}

func (x *ReserveAddressRequest) Reset() {
	*x = ReserveAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveAddressRequest) ProtoMessage() {}

func (x *ReserveAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveAddressRequest.ProtoReflect.Descriptor instead.
func (*ReserveAddressRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{39}
}

func (x *ReserveAddressRequest) GetSubnetReference() *SubnetReference {
	if x != nil {
		return x.SubnetReference
	}
	return nil
}

func (x *ReserveAddressRequest) GetAddressReference() *AddressReference {
	if x != nil {
		return x.AddressReference
	}
	return nil
}

type ReleaseAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetReference  *SubnetReference  `protobuf:"bytes,1,opt,name=subnetReference,proto3" json:"subnetReference,omitempty"`
	AddressReference *AddressReference `protobuf:"bytes,2,opt,name=addressReference,proto3" json:"addressReference,omitempty"`
}

func (x *ReleaseAddressRequest) Reset() {
	*x = ReleaseAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseAddressRequest) ProtoMessage() {}

func (x *ReleaseAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseAddressRequest.ProtoReflect.Descriptor instead.
func (*ReleaseAddressRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{40}
}

func (x *ReleaseAddressRequest) GetSubnetReference() *SubnetReference {
	if x != nil {
		return x.SubnetReference
	}
	return nil
}

func (x *ReleaseAddressRequest) GetAddressReference() *AddressReference {
	if x != nil {
		return x.AddressReference
	}
	return nil
}

type AddressReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user-defined string that uniquely identifies this consumed address within the subnet.
	// Generally, this should be an FQDN that resolves to this address.
	AddressConsumerId string `protobuf:"bytes,1,opt,name=addressConsumerId,proto3" json:"addressConsumerId,omitempty"`
	// IP address to consume, in format "1.2.3.4". Optional.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AddressReference) Reset() {
	*x = AddressReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressReference) ProtoMessage() {}

func (x *AddressReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressReference.ProtoReflect.Descriptor instead.
func (*AddressReference) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{41}
}

func (x *AddressReference) GetAddressConsumerId() string {
	if x != nil {
		return x.AddressConsumerId
	}
	return ""
}

func (x *AddressReference) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ReserveAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address in format "1.2.3.4".
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ReserveAddressResponse) Reset() {
	*x = ReserveAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveAddressResponse) ProtoMessage() {}

func (x *ReserveAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveAddressResponse.ProtoReflect.Descriptor instead.
func (*ReserveAddressResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{42}
}

func (x *ReserveAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type SubnetStatisticsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region               string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone     string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	AddressSpace         string `protobuf:"bytes,3,opt,name=addressSpace,proto3" json:"addressSpace,omitempty"`
	PrefixLength         int32  `protobuf:"varint,4,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	VlanDomain           string `protobuf:"bytes,5,opt,name=vlanDomain,proto3" json:"vlanDomain,omitempty"`
	TotalSubnets         int32  `protobuf:"varint,6,opt,name=totalSubnets,proto3" json:"totalSubnets,omitempty"`
	TotalConsumedSubnets int32  `protobuf:"varint,7,opt,name=totalConsumedSubnets,proto3" json:"totalConsumedSubnets,omitempty"`
}

func (x *SubnetStatisticsRecord) Reset() {
	*x = SubnetStatisticsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetStatisticsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetStatisticsRecord) ProtoMessage() {}

func (x *SubnetStatisticsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetStatisticsRecord.ProtoReflect.Descriptor instead.
func (*SubnetStatisticsRecord) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{43}
}

func (x *SubnetStatisticsRecord) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SubnetStatisticsRecord) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *SubnetStatisticsRecord) GetAddressSpace() string {
	if x != nil {
		return x.AddressSpace
	}
	return ""
}

func (x *SubnetStatisticsRecord) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *SubnetStatisticsRecord) GetVlanDomain() string {
	if x != nil {
		return x.VlanDomain
	}
	return ""
}

func (x *SubnetStatisticsRecord) GetTotalSubnets() int32 {
	if x != nil {
		return x.TotalSubnets
	}
	return 0
}

func (x *SubnetStatisticsRecord) GetTotalConsumedSubnets() int32 {
	if x != nil {
		return x.TotalConsumedSubnets
	}
	return 0
}

type GetSubnetStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetStatistics []*SubnetStatisticsRecord `protobuf:"bytes,1,rep,name=subnetStatistics,proto3" json:"subnetStatistics,omitempty"`
}

func (x *GetSubnetStatisticsResponse) Reset() {
	*x = GetSubnetStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetStatisticsResponse) ProtoMessage() {}

func (x *GetSubnetStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnetStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{44}
}

func (x *GetSubnetStatisticsResponse) GetSubnetStatistics() []*SubnetStatisticsRecord {
	if x != nil {
		return x.SubnetStatistics
	}
	return nil
}

type VNetReserveSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VNetReference *VNetReference `protobuf:"bytes,1,opt,name=vNetReference,proto3" json:"vNetReference,omitempty"`
	VlanDomain    string         `protobuf:"bytes,2,opt,name=vlanDomain,proto3" json:"vlanDomain,omitempty"`
	AddressSpace  string         `protobuf:"bytes,3,opt,name=addressSpace,proto3" json:"addressSpace,omitempty"`
	// If non-zero, the reserved subnet will have a prefix length with this value or less.
	MaximumPrefixLength int32 `protobuf:"varint,4,opt,name=maximumPrefixLength,proto3" json:"maximumPrefixLength,omitempty"`
}

func (x *VNetReserveSubnetRequest) Reset() {
	*x = VNetReserveSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetReserveSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetReserveSubnetRequest) ProtoMessage() {}

func (x *VNetReserveSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetReserveSubnetRequest.ProtoReflect.Descriptor instead.
func (*VNetReserveSubnetRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{45}
}

func (x *VNetReserveSubnetRequest) GetVNetReference() *VNetReference {
	if x != nil {
		return x.VNetReference
	}
	return nil
}

func (x *VNetReserveSubnetRequest) GetVlanDomain() string {
	if x != nil {
		return x.VlanDomain
	}
	return ""
}

func (x *VNetReserveSubnetRequest) GetAddressSpace() string {
	if x != nil {
		return x.AddressSpace
	}
	return ""
}

func (x *VNetReserveSubnetRequest) GetMaximumPrefixLength() int32 {
	if x != nil {
		return x.MaximumPrefixLength
	}
	return 0
}

type VNetReleaseSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VNetReference *VNetReference `protobuf:"bytes,1,opt,name=vNetReference,proto3" json:"vNetReference,omitempty"`
}

func (x *VNetReleaseSubnetRequest) Reset() {
	*x = VNetReleaseSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetReleaseSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetReleaseSubnetRequest) ProtoMessage() {}

func (x *VNetReleaseSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetReleaseSubnetRequest.ProtoReflect.Descriptor instead.
func (*VNetReleaseSubnetRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{46}
}

func (x *VNetReleaseSubnetRequest) GetVNetReference() *VNetReference {
	if x != nil {
		return x.VNetReference
	}
	return nil
}

type VNetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// VNet name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VNetReference) Reset() {
	*x = VNetReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetReference) ProtoMessage() {}

func (x *VNetReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetReference.ProtoReflect.Descriptor instead.
func (*VNetReference) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{47}
}

func (x *VNetReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *VNetReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VNetPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *VNetPrivate_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *VNetSpecPrivate      `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *VNetPrivate) Reset() {
	*x = VNetPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetPrivate) ProtoMessage() {}

func (x *VNetPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetPrivate.ProtoReflect.Descriptor instead.
func (*VNetPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{48}
}

func (x *VNetPrivate) GetMetadata() *VNetPrivate_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VNetPrivate) GetSpec() *VNetSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type VNetSpecPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region           string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	Subnet           string `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	PrefixLength     int32  `protobuf:"varint,4,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	Gateway          string `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	VlanId           int32  `protobuf:"varint,6,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	VlanDomain       string `protobuf:"bytes,7,opt,name=vlanDomain,proto3" json:"vlanDomain,omitempty"`
	AddressSpace     string `protobuf:"bytes,8,opt,name=addressSpace,proto3" json:"addressSpace,omitempty"`
}

func (x *VNetSpecPrivate) Reset() {
	*x = VNetSpecPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetSpecPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetSpecPrivate) ProtoMessage() {}

func (x *VNetSpecPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetSpecPrivate.ProtoReflect.Descriptor instead.
func (*VNetSpecPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{49}
}

func (x *VNetSpecPrivate) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *VNetSpecPrivate) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *VNetSpecPrivate) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *VNetSpecPrivate) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *VNetSpecPrivate) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *VNetSpecPrivate) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *VNetSpecPrivate) GetVlanDomain() string {
	if x != nil {
		return x.VlanDomain
	}
	return ""
}

func (x *VNetSpecPrivate) GetAddressSpace() string {
	if x != nil {
		return x.AddressSpace
	}
	return ""
}

type VNetReserveAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VNetReference    *VNetReference        `protobuf:"bytes,1,opt,name=vNetReference,proto3" json:"vNetReference,omitempty"`
	AddressReference *VNetAddressReference `protobuf:"bytes,2,opt,name=addressReference,proto3" json:"addressReference,omitempty"`
}

func (x *VNetReserveAddressRequest) Reset() {
	*x = VNetReserveAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetReserveAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetReserveAddressRequest) ProtoMessage() {}

func (x *VNetReserveAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetReserveAddressRequest.ProtoReflect.Descriptor instead.
func (*VNetReserveAddressRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{50}
}

func (x *VNetReserveAddressRequest) GetVNetReference() *VNetReference {
	if x != nil {
		return x.VNetReference
	}
	return nil
}

func (x *VNetReserveAddressRequest) GetAddressReference() *VNetAddressReference {
	if x != nil {
		return x.AddressReference
	}
	return nil
}

type VNetReleaseAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VNetReference    *VNetReference        `protobuf:"bytes,1,opt,name=vNetReference,proto3" json:"vNetReference,omitempty"`
	AddressReference *VNetAddressReference `protobuf:"bytes,2,opt,name=addressReference,proto3" json:"addressReference,omitempty"`
}

func (x *VNetReleaseAddressRequest) Reset() {
	*x = VNetReleaseAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetReleaseAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetReleaseAddressRequest) ProtoMessage() {}

func (x *VNetReleaseAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetReleaseAddressRequest.ProtoReflect.Descriptor instead.
func (*VNetReleaseAddressRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{51}
}

func (x *VNetReleaseAddressRequest) GetVNetReference() *VNetReference {
	if x != nil {
		return x.VNetReference
	}
	return nil
}

func (x *VNetReleaseAddressRequest) GetAddressReference() *VNetAddressReference {
	if x != nil {
		return x.AddressReference
	}
	return nil
}

type VNetAddressReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user-defined string that uniquely identifies this consumed address within the VNet.
	// Generally, this should be an FQDN that resolves to this address.
	AddressConsumerId string `protobuf:"bytes,3,opt,name=addressConsumerId,proto3" json:"addressConsumerId,omitempty"`
	// IP address to consume, in format "1.2.3.4". Optional.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *VNetAddressReference) Reset() {
	*x = VNetAddressReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetAddressReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetAddressReference) ProtoMessage() {}

func (x *VNetAddressReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetAddressReference.ProtoReflect.Descriptor instead.
func (*VNetAddressReference) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{52}
}

func (x *VNetAddressReference) GetAddressConsumerId() string {
	if x != nil {
		return x.AddressConsumerId
	}
	return ""
}

func (x *VNetAddressReference) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type VNetReserveAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address in format "1.2.3.4".
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *VNetReserveAddressResponse) Reset() {
	*x = VNetReserveAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetReserveAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetReserveAddressResponse) ProtoMessage() {}

func (x *VNetReserveAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetReserveAddressResponse.ProtoReflect.Descriptor instead.
func (*VNetReserveAddressResponse) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{53}
}

func (x *VNetReserveAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type LoadBalancerCreatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadataCreatePrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *LoadBalancerSpecPrivate           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *LoadBalancerCreatePrivateRequest) Reset() {
	*x = LoadBalancerCreatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerCreatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerCreatePrivateRequest) ProtoMessage() {}

func (x *LoadBalancerCreatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerCreatePrivateRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerCreatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{54}
}

func (x *LoadBalancerCreatePrivateRequest) GetMetadata() *LoadBalancerMetadataCreatePrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LoadBalancerCreatePrivateRequest) GetSpec() *LoadBalancerSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type LoadBalancerMetadataCreatePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Name will be generated if empty. Optional.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// If provided, this must be a UUID. Optional,
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// Not implemented.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If true, quota check will be skipped
	SkipQuotaCheck bool `protobuf:"varint,5,opt,name=skipQuotaCheck,proto3" json:"skipQuotaCheck,omitempty"`
}

func (x *LoadBalancerMetadataCreatePrivate) Reset() {
	*x = LoadBalancerMetadataCreatePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerMetadataCreatePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerMetadataCreatePrivate) ProtoMessage() {}

func (x *LoadBalancerMetadataCreatePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerMetadataCreatePrivate.ProtoReflect.Descriptor instead.
func (*LoadBalancerMetadataCreatePrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{55}
}

func (x *LoadBalancerMetadataCreatePrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *LoadBalancerMetadataCreatePrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancerMetadataCreatePrivate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *LoadBalancerMetadataCreatePrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LoadBalancerMetadataCreatePrivate) GetSkipQuotaCheck() bool {
	if x != nil {
		return x.SkipQuotaCheck
	}
	return false
}

type LoadBalancerUpdateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerIdReference   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *LoadBalancerStatusPrivate `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LoadBalancerUpdateStatusRequest) Reset() {
	*x = LoadBalancerUpdateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerUpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerUpdateStatusRequest) ProtoMessage() {}

func (x *LoadBalancerUpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerUpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerUpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{56}
}

func (x *LoadBalancerUpdateStatusRequest) GetMetadata() *LoadBalancerIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LoadBalancerUpdateStatusRequest) GetStatus() *LoadBalancerStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type LoadBalancerPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *LoadBalancerSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *LoadBalancerStatusPrivate   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LoadBalancerPrivate) Reset() {
	*x = LoadBalancerPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerPrivate) ProtoMessage() {}

func (x *LoadBalancerPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerPrivate.ProtoReflect.Descriptor instead.
func (*LoadBalancerPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{57}
}

func (x *LoadBalancerPrivate) GetMetadata() *LoadBalancerMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LoadBalancerPrivate) GetSpec() *LoadBalancerSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *LoadBalancerPrivate) GetStatus() *LoadBalancerStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type LoadBalancerMetadataPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Map of string keys and values that can be used to organize and categorize load balancers.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Not implemented
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
	// Timestamp when resource was deleted.
	DeletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deletedTimestamp,proto3" json:"deletedTimestamp,omitempty"`
}

func (x *LoadBalancerMetadataPrivate) Reset() {
	*x = LoadBalancerMetadataPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerMetadataPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerMetadataPrivate) ProtoMessage() {}

func (x *LoadBalancerMetadataPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerMetadataPrivate.ProtoReflect.Descriptor instead.
func (*LoadBalancerMetadataPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{58}
}

func (x *LoadBalancerMetadataPrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *LoadBalancerMetadataPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancerMetadataPrivate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *LoadBalancerMetadataPrivate) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *LoadBalancerMetadataPrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LoadBalancerMetadataPrivate) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *LoadBalancerMetadataPrivate) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

func (x *LoadBalancerMetadataPrivate) GetDeletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedTimestamp
	}
	return nil
}

type LoadBalancerRemoveFinalizerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerIdReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *LoadBalancerRemoveFinalizerRequest) Reset() {
	*x = LoadBalancerRemoveFinalizerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerRemoveFinalizerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerRemoveFinalizerRequest) ProtoMessage() {}

func (x *LoadBalancerRemoveFinalizerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerRemoveFinalizerRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerRemoveFinalizerRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{59}
}

func (x *LoadBalancerRemoveFinalizerRequest) GetMetadata() *LoadBalancerIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type LoadBalancerIdReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ResourceId     string `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *LoadBalancerIdReference) Reset() {
	*x = LoadBalancerIdReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerIdReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerIdReference) ProtoMessage() {}

func (x *LoadBalancerIdReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerIdReference.ProtoReflect.Descriptor instead.
func (*LoadBalancerIdReference) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{60}
}

func (x *LoadBalancerIdReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *LoadBalancerIdReference) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *LoadBalancerIdReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type LoadBalancerDeletePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *LoadBalancerDeletePrivateRequest) Reset() {
	*x = LoadBalancerDeletePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerDeletePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerDeletePrivateRequest) ProtoMessage() {}

func (x *LoadBalancerDeletePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerDeletePrivateRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerDeletePrivateRequest) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{61}
}

func (x *LoadBalancerDeletePrivateRequest) GetMetadata() *LoadBalancerMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type LoadBalancerSpecPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*LoadBalancerListener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
	// Security options which apply to the load balancer.
	Security *LoadBalancerSecurity `protobuf:"bytes,2,opt,name=security,proto3" json:"security,omitempty"`
}

func (x *LoadBalancerSpecPrivate) Reset() {
	*x = LoadBalancerSpecPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerSpecPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSpecPrivate) ProtoMessage() {}

func (x *LoadBalancerSpecPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSpecPrivate.ProtoReflect.Descriptor instead.
func (*LoadBalancerSpecPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{62}
}

func (x *LoadBalancerSpecPrivate) GetListeners() []*LoadBalancerListener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *LoadBalancerSpecPrivate) GetSecurity() *LoadBalancerSecurity {
	if x != nil {
		return x.Security
	}
	return nil
}

type LoadBalancerStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions *LoadBalancerConditionsStatus `protobuf:"bytes,1,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Listeners  []*LoadBalancerListenerStatus `protobuf:"bytes,2,rep,name=listeners,proto3" json:"listeners,omitempty"`
	State      string                        `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Vip        string                        `protobuf:"bytes,4,opt,name=vip,proto3" json:"vip,omitempty"`
	Message    string                        `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LoadBalancerStatusPrivate) Reset() {
	*x = LoadBalancerStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerStatusPrivate) ProtoMessage() {}

func (x *LoadBalancerStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerStatusPrivate.ProtoReflect.Descriptor instead.
func (*LoadBalancerStatusPrivate) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{63}
}

func (x *LoadBalancerStatusPrivate) GetConditions() *LoadBalancerConditionsStatus {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *LoadBalancerStatusPrivate) GetListeners() []*LoadBalancerListenerStatus {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *LoadBalancerStatusPrivate) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LoadBalancerStatusPrivate) GetVip() string {
	if x != nil {
		return x.Vip
	}
	return ""
}

func (x *LoadBalancerStatusPrivate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReserveSubnetRequest_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region           string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The reserved subnet will have a prefix length with this value or less.
	PrefixLengthHint int32  `protobuf:"varint,3,opt,name=prefixLengthHint,proto3" json:"prefixLengthHint,omitempty"`
	VlanDomain       string `protobuf:"bytes,4,opt,name=vlanDomain,proto3" json:"vlanDomain,omitempty"`
	AddressSpace     string `protobuf:"bytes,5,opt,name=addressSpace,proto3" json:"addressSpace,omitempty"`
}

func (x *ReserveSubnetRequest_Spec) Reset() {
	*x = ReserveSubnetRequest_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveSubnetRequest_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveSubnetRequest_Spec) ProtoMessage() {}

func (x *ReserveSubnetRequest_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveSubnetRequest_Spec.ProtoReflect.Descriptor instead.
func (*ReserveSubnetRequest_Spec) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{35, 0}
}

func (x *ReserveSubnetRequest_Spec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ReserveSubnetRequest_Spec) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *ReserveSubnetRequest_Spec) GetPrefixLengthHint() int32 {
	if x != nil {
		return x.PrefixLengthHint
	}
	return 0
}

func (x *ReserveSubnetRequest_Spec) GetVlanDomain() string {
	if x != nil {
		return x.VlanDomain
	}
	return ""
}

func (x *ReserveSubnetRequest_Spec) GetAddressSpace() string {
	if x != nil {
		return x.AddressSpace
	}
	return ""
}

type VNetPrivate_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// VNet name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// VNet resourceId.
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
}

func (x *VNetPrivate_Metadata) Reset() {
	*x = VNetPrivate_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_private_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetPrivate_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetPrivate_Metadata) ProtoMessage() {}

func (x *VNetPrivate_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_private_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetPrivate_Metadata.ProtoReflect.Descriptor instead.
func (*VNetPrivate_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_private_proto_rawDescGZIP(), []int{48, 0}
}

func (x *VNetPrivate_Metadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *VNetPrivate_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VNetPrivate_Metadata) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

var File_compute_private_proto protoreflect.FileDescriptor

var file_compute_private_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x26, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x18, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x19, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xa8, 0x02, 0x0a, 0x1d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x24, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x5d, 0x0a, 0x25, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x22, 0x59, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a,
	0x1d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x24, 0x0a, 0x22,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x40, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x58, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a,
	0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xa2, 0x04, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6b,
	0x69, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x08, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x73, 0x68, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x19, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x19, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x13, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x13, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a,
	0x10, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x10, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x17, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x4e,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x4e, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x73, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x4e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x4e, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x21, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x22, 0x92, 0x02, 0x0a, 0x22, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6b, 0x69,
	0x70, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x22, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x5b, 0x0a, 0x10, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0xff, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x58, 0x0a,
	0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x17,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcb, 0x02, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0xba, 0x01,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x9e, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x10,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x5a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x32,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6c, 0x61,
	0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x22, 0x68, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x18,
	0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x76, 0x4e, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x76, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x18, 0x56, 0x4e,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x76, 0x4e, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x76, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x4b, 0x0a, 0x0d, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xda, 0x01, 0x0a, 0x0b, 0x56, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x1a, 0x66, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x87, 0x02, 0x0a,
	0x0f, 0x56, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x56, 0x4e, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x76, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0d, 0x76, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x56, 0x4e,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x76, 0x4e, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x76, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x14,
	0x56, 0x4e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x1a,
	0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x22, 0xb0, 0x02, 0x0a, 0x21, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6b, 0x69,
	0x70, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xc3, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x04, 0x0a, 0x1b, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x46, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x22, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a,
	0x38, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x13, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x41, 0x73, 0x41, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x73, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x73, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x02, 0x2a,
	0x58, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x6f, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x32, 0xf1, 0x06, 0x0a, 0x16, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c,
	0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x10, 0x01, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0b,
	0x50, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x85, 0x01,
	0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x96, 0x02, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x00, 0x32, 0x9e,
	0x05, 0x0a, 0x18, 0x49, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x50,
	0x75, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x12, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32,
	0x90, 0x03, 0x0a, 0x12, 0x56, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x32, 0xf5, 0x04, 0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x56, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x10, 0x01, 0x30, 0x01, 0x42, 0x6d, 0x5a, 0x4d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64,
	0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x02, 0xaa, 0xdd, 0x1b, 0x14, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2d, 0x61,
	0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_compute_private_proto_rawDescOnce sync.Once
	file_compute_private_proto_rawDescData = file_compute_private_proto_rawDesc
)

func file_compute_private_proto_rawDescGZIP() []byte {
	file_compute_private_proto_rawDescOnce.Do(func() {
		file_compute_private_proto_rawDescData = protoimpl.X.CompressGZIP(file_compute_private_proto_rawDescData)
	})
	return file_compute_private_proto_rawDescData
}

var file_compute_private_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_compute_private_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_compute_private_proto_goTypes = []interface{}{
	(WatchDeltaType)(0),                            // 0: proto.WatchDeltaType
	(InstanceServiceType)(0),                       // 1: proto.InstanceServiceType
	(GenerateAddressesMethod)(0),                   // 2: proto.GenerateAddressesMethod
	(*LoadBalancerSearchStreamPrivateRequest)(nil), // 3: proto.LoadBalancerSearchStreamPrivateRequest
	(*LoadBalancerWatchRequest)(nil),               // 4: proto.LoadBalancerWatchRequest
	(*LoadBalancerWatchResponse)(nil),              // 5: proto.LoadBalancerWatchResponse
	(*InstanceCreatePrivateRequest)(nil),           // 6: proto.InstanceCreatePrivateRequest
	(*InstanceMetadataCreatePrivate)(nil),          // 7: proto.InstanceMetadataCreatePrivate
	(*InstanceCreateMultiplePrivateRequest)(nil),   // 8: proto.InstanceCreateMultiplePrivateRequest
	(*InstanceCreateMultiplePrivateResponse)(nil),  // 9: proto.InstanceCreateMultiplePrivateResponse
	(*InstanceUpdateStatusRequest)(nil),            // 10: proto.InstanceUpdateStatusRequest
	(*InstanceUpdatePrivateRequest)(nil),           // 11: proto.InstanceUpdatePrivateRequest
	(*InstanceSearchPrivateRequest)(nil),           // 12: proto.InstanceSearchPrivateRequest
	(*InstanceSearchPrivateResponse)(nil),          // 13: proto.InstanceSearchPrivateResponse
	(*InstanceSearchStreamPrivateRequest)(nil),     // 14: proto.InstanceSearchStreamPrivateRequest
	(*InstanceWatchRequest)(nil),                   // 15: proto.InstanceWatchRequest
	(*InstanceWatchResponse)(nil),                  // 16: proto.InstanceWatchResponse
	(*InstanceRemoveFinalizerRequest)(nil),         // 17: proto.InstanceRemoveFinalizerRequest
	(*InstanceIdReference)(nil),                    // 18: proto.InstanceIdReference
	(*InstancePrivate)(nil),                        // 19: proto.InstancePrivate
	(*InstanceMetadataPrivate)(nil),                // 20: proto.InstanceMetadataPrivate
	(*InstanceDeletePrivateRequest)(nil),           // 21: proto.InstanceDeletePrivateRequest
	(*InstanceSpecPrivate)(nil),                    // 22: proto.InstanceSpecPrivate
	(*NetworkInterfacePrivate)(nil),                // 23: proto.NetworkInterfacePrivate
	(*InstanceStatusPrivate)(nil),                  // 24: proto.InstanceStatusPrivate
	(*InstanceInterfaceStatusPrivate)(nil),         // 25: proto.InstanceInterfaceStatusPrivate
	(*InstanceGroupCreatePrivateRequest)(nil),      // 26: proto.InstanceGroupCreatePrivateRequest
	(*InstanceGroupMetadataCreatePrivate)(nil),     // 27: proto.InstanceGroupMetadataCreatePrivate
	(*InstanceGroupSpecPrivate)(nil),               // 28: proto.InstanceGroupSpecPrivate
	(*InstanceGroupPlacement)(nil),                 // 29: proto.InstanceGroupPlacement
	(*InstanceGroupPrivateCreateResponse)(nil),     // 30: proto.InstanceGroupPrivateCreateResponse
	(*ScheduleRequest)(nil),                        // 31: proto.ScheduleRequest
	(*ScheduleResponse)(nil),                       // 32: proto.ScheduleResponse
	(*ScheduleInstanceResult)(nil),                 // 33: proto.ScheduleInstanceResult
	(*CreateSubnetRequest)(nil),                    // 34: proto.CreateSubnetRequest
	(*CreateSubnetResponse)(nil),                   // 35: proto.CreateSubnetResponse
	(*DeleteSubnetRequest)(nil),                    // 36: proto.DeleteSubnetRequest
	(*SearchSubnetRequest)(nil),                    // 37: proto.SearchSubnetRequest
	(*ReserveSubnetRequest)(nil),                   // 38: proto.ReserveSubnetRequest
	(*ReleaseSubnetRequest)(nil),                   // 39: proto.ReleaseSubnetRequest
	(*SubnetReference)(nil),                        // 40: proto.SubnetReference
	(*Subnet)(nil),                                 // 41: proto.Subnet
	(*ReserveAddressRequest)(nil),                  // 42: proto.ReserveAddressRequest
	(*ReleaseAddressRequest)(nil),                  // 43: proto.ReleaseAddressRequest
	(*AddressReference)(nil),                       // 44: proto.AddressReference
	(*ReserveAddressResponse)(nil),                 // 45: proto.ReserveAddressResponse
	(*SubnetStatisticsRecord)(nil),                 // 46: proto.SubnetStatisticsRecord
	(*GetSubnetStatisticsResponse)(nil),            // 47: proto.GetSubnetStatisticsResponse
	(*VNetReserveSubnetRequest)(nil),               // 48: proto.VNetReserveSubnetRequest
	(*VNetReleaseSubnetRequest)(nil),               // 49: proto.VNetReleaseSubnetRequest
	(*VNetReference)(nil),                          // 50: proto.VNetReference
	(*VNetPrivate)(nil),                            // 51: proto.VNetPrivate
	(*VNetSpecPrivate)(nil),                        // 52: proto.VNetSpecPrivate
	(*VNetReserveAddressRequest)(nil),              // 53: proto.VNetReserveAddressRequest
	(*VNetReleaseAddressRequest)(nil),              // 54: proto.VNetReleaseAddressRequest
	(*VNetAddressReference)(nil),                   // 55: proto.VNetAddressReference
	(*VNetReserveAddressResponse)(nil),             // 56: proto.VNetReserveAddressResponse
	(*LoadBalancerCreatePrivateRequest)(nil),       // 57: proto.LoadBalancerCreatePrivateRequest
	(*LoadBalancerMetadataCreatePrivate)(nil),      // 58: proto.LoadBalancerMetadataCreatePrivate
	(*LoadBalancerUpdateStatusRequest)(nil),        // 59: proto.LoadBalancerUpdateStatusRequest
	(*LoadBalancerPrivate)(nil),                    // 60: proto.LoadBalancerPrivate
	(*LoadBalancerMetadataPrivate)(nil),            // 61: proto.LoadBalancerMetadataPrivate
	(*LoadBalancerRemoveFinalizerRequest)(nil),     // 62: proto.LoadBalancerRemoveFinalizerRequest
	(*LoadBalancerIdReference)(nil),                // 63: proto.LoadBalancerIdReference
	(*LoadBalancerDeletePrivateRequest)(nil),       // 64: proto.LoadBalancerDeletePrivateRequest
	(*LoadBalancerSpecPrivate)(nil),                // 65: proto.LoadBalancerSpecPrivate
	(*LoadBalancerStatusPrivate)(nil),              // 66: proto.LoadBalancerStatusPrivate
	nil,                                            // 67: proto.InstanceMetadataCreatePrivate.LabelsEntry
	nil,                                            // 68: proto.InstanceMetadataPrivate.LabelsEntry
	nil,                                            // 69: proto.InstanceGroupMetadataCreatePrivate.LabelsEntry
	(*ReserveSubnetRequest_Spec)(nil),              // 70: proto.ReserveSubnetRequest.Spec
	(*VNetPrivate_Metadata)(nil),                   // 71: proto.VNetPrivate.Metadata
	nil,                                            // 72: proto.LoadBalancerMetadataCreatePrivate.LabelsEntry
	nil,                                            // 73: proto.LoadBalancerMetadataPrivate.LabelsEntry
	(*InstanceMetadataUpdate)(nil),                 // 74: proto.InstanceMetadataUpdate
	(*InstanceMetadataSearch)(nil),                 // 75: proto.InstanceMetadataSearch
	(*timestamppb.Timestamp)(nil),                  // 76: google.protobuf.Timestamp
	(*InstanceMetadataReference)(nil),              // 77: proto.InstanceMetadataReference
	(RunStrategy)(0),                               // 78: proto.RunStrategy
	(*TopologySpreadConstraints)(nil),              // 79: proto.TopologySpreadConstraints
	(TriState)(0),                                  // 80: proto.TriState
	(*InstanceTypeSpec)(nil),                       // 81: proto.InstanceTypeSpec
	(*MachineImageSpec)(nil),                       // 82: proto.MachineImageSpec
	(*SshPublicKeySpec)(nil),                       // 83: proto.SshPublicKeySpec
	(InstancePhase)(0),                             // 84: proto.InstancePhase
	(*SshProxyTunnelStatus)(nil),                   // 85: proto.SshProxyTunnelStatus
	(*LoadBalancerMetadataReference)(nil),          // 86: proto.LoadBalancerMetadataReference
	(*LoadBalancerListener)(nil),                   // 87: proto.LoadBalancerListener
	(*LoadBalancerSecurity)(nil),                   // 88: proto.LoadBalancerSecurity
	(*LoadBalancerConditionsStatus)(nil),           // 89: proto.LoadBalancerConditionsStatus
	(*LoadBalancerListenerStatus)(nil),             // 90: proto.LoadBalancerListenerStatus
	(*emptypb.Empty)(nil),                          // 91: google.protobuf.Empty
	(*SchedulerStatistics)(nil),                    // 92: proto.SchedulerStatistics
}
var file_compute_private_proto_depIdxs = []int32{
	0,   // 0: proto.LoadBalancerWatchResponse.type:type_name -> proto.WatchDeltaType
	60,  // 1: proto.LoadBalancerWatchResponse.object:type_name -> proto.LoadBalancerPrivate
	7,   // 2: proto.InstanceCreatePrivateRequest.metadata:type_name -> proto.InstanceMetadataCreatePrivate
	22,  // 3: proto.InstanceCreatePrivateRequest.spec:type_name -> proto.InstanceSpecPrivate
	67,  // 4: proto.InstanceMetadataCreatePrivate.labels:type_name -> proto.InstanceMetadataCreatePrivate.LabelsEntry
	6,   // 5: proto.InstanceCreateMultiplePrivateRequest.instances:type_name -> proto.InstanceCreatePrivateRequest
	19,  // 6: proto.InstanceCreateMultiplePrivateResponse.instances:type_name -> proto.InstancePrivate
	18,  // 7: proto.InstanceUpdateStatusRequest.metadata:type_name -> proto.InstanceIdReference
	24,  // 8: proto.InstanceUpdateStatusRequest.status:type_name -> proto.InstanceStatusPrivate
	74,  // 9: proto.InstanceUpdatePrivateRequest.metadata:type_name -> proto.InstanceMetadataUpdate
	22,  // 10: proto.InstanceUpdatePrivateRequest.spec:type_name -> proto.InstanceSpecPrivate
	75,  // 11: proto.InstanceSearchPrivateRequest.metadata:type_name -> proto.InstanceMetadataSearch
	19,  // 12: proto.InstanceSearchPrivateResponse.items:type_name -> proto.InstancePrivate
	0,   // 13: proto.InstanceWatchResponse.type:type_name -> proto.WatchDeltaType
	19,  // 14: proto.InstanceWatchResponse.object:type_name -> proto.InstancePrivate
	18,  // 15: proto.InstanceRemoveFinalizerRequest.metadata:type_name -> proto.InstanceIdReference
	20,  // 16: proto.InstancePrivate.metadata:type_name -> proto.InstanceMetadataPrivate
	22,  // 17: proto.InstancePrivate.spec:type_name -> proto.InstanceSpecPrivate
	24,  // 18: proto.InstancePrivate.status:type_name -> proto.InstanceStatusPrivate
	68,  // 19: proto.InstanceMetadataPrivate.labels:type_name -> proto.InstanceMetadataPrivate.LabelsEntry
	76,  // 20: proto.InstanceMetadataPrivate.creationTimestamp:type_name -> google.protobuf.Timestamp
	76,  // 21: proto.InstanceMetadataPrivate.deletionTimestamp:type_name -> google.protobuf.Timestamp
	76,  // 22: proto.InstanceMetadataPrivate.deletedTimestamp:type_name -> google.protobuf.Timestamp
	77,  // 23: proto.InstanceDeletePrivateRequest.metadata:type_name -> proto.InstanceMetadataReference
	78,  // 24: proto.InstanceSpecPrivate.runStrategy:type_name -> proto.RunStrategy
	23,  // 25: proto.InstanceSpecPrivate.interfaces:type_name -> proto.NetworkInterfacePrivate
	79,  // 26: proto.InstanceSpecPrivate.topologySpreadConstraints:type_name -> proto.TopologySpreadConstraints
	80,  // 27: proto.InstanceSpecPrivate.quickConnectEnabled:type_name -> proto.TriState
	81,  // 28: proto.InstanceSpecPrivate.instanceTypeSpec:type_name -> proto.InstanceTypeSpec
	82,  // 29: proto.InstanceSpecPrivate.machineImageSpec:type_name -> proto.MachineImageSpec
	83,  // 30: proto.InstanceSpecPrivate.sshPublicKeySpecs:type_name -> proto.SshPublicKeySpec
	1,   // 31: proto.InstanceSpecPrivate.serviceType:type_name -> proto.InstanceServiceType
	84,  // 32: proto.InstanceStatusPrivate.phase:type_name -> proto.InstancePhase
	25,  // 33: proto.InstanceStatusPrivate.interfaces:type_name -> proto.InstanceInterfaceStatusPrivate
	85,  // 34: proto.InstanceStatusPrivate.sshProxy:type_name -> proto.SshProxyTunnelStatus
	27,  // 35: proto.InstanceGroupCreatePrivateRequest.metadata:type_name -> proto.InstanceGroupMetadataCreatePrivate
	28,  // 36: proto.InstanceGroupCreatePrivateRequest.spec:type_name -> proto.InstanceGroupSpecPrivate
	69,  // 37: proto.InstanceGroupMetadataCreatePrivate.labels:type_name -> proto.InstanceGroupMetadataCreatePrivate.LabelsEntry
	22,  // 38: proto.InstanceGroupSpecPrivate.instanceSpecPrivate:type_name -> proto.InstanceSpecPrivate
	29,  // 39: proto.InstanceGroupSpecPrivate.placement:type_name -> proto.InstanceGroupPlacement
	27,  // 40: proto.InstanceGroupPrivateCreateResponse.metadata:type_name -> proto.InstanceGroupMetadataCreatePrivate
	29,  // 41: proto.InstanceGroupPrivateCreateResponse.placement:type_name -> proto.InstanceGroupPlacement
	19,  // 42: proto.InstanceGroupPrivateCreateResponse.instances:type_name -> proto.InstancePrivate
	19,  // 43: proto.ScheduleRequest.instances:type_name -> proto.InstancePrivate
	33,  // 44: proto.ScheduleResponse.instanceResults:type_name -> proto.ScheduleInstanceResult
	2,   // 45: proto.CreateSubnetRequest.generateAddressesMethod:type_name -> proto.GenerateAddressesMethod
	40,  // 46: proto.ReserveSubnetRequest.subnetReference:type_name -> proto.SubnetReference
	70,  // 47: proto.ReserveSubnetRequest.spec:type_name -> proto.ReserveSubnetRequest.Spec
	40,  // 48: proto.ReleaseSubnetRequest.subnetReference:type_name -> proto.SubnetReference
	40,  // 49: proto.ReserveAddressRequest.subnetReference:type_name -> proto.SubnetReference
	44,  // 50: proto.ReserveAddressRequest.addressReference:type_name -> proto.AddressReference
	40,  // 51: proto.ReleaseAddressRequest.subnetReference:type_name -> proto.SubnetReference
	44,  // 52: proto.ReleaseAddressRequest.addressReference:type_name -> proto.AddressReference
	46,  // 53: proto.GetSubnetStatisticsResponse.subnetStatistics:type_name -> proto.SubnetStatisticsRecord
	50,  // 54: proto.VNetReserveSubnetRequest.vNetReference:type_name -> proto.VNetReference
	50,  // 55: proto.VNetReleaseSubnetRequest.vNetReference:type_name -> proto.VNetReference
	71,  // 56: proto.VNetPrivate.metadata:type_name -> proto.VNetPrivate.Metadata
	52,  // 57: proto.VNetPrivate.spec:type_name -> proto.VNetSpecPrivate
	50,  // 58: proto.VNetReserveAddressRequest.vNetReference:type_name -> proto.VNetReference
	55,  // 59: proto.VNetReserveAddressRequest.addressReference:type_name -> proto.VNetAddressReference
	50,  // 60: proto.VNetReleaseAddressRequest.vNetReference:type_name -> proto.VNetReference
	55,  // 61: proto.VNetReleaseAddressRequest.addressReference:type_name -> proto.VNetAddressReference
	58,  // 62: proto.LoadBalancerCreatePrivateRequest.metadata:type_name -> proto.LoadBalancerMetadataCreatePrivate
	65,  // 63: proto.LoadBalancerCreatePrivateRequest.spec:type_name -> proto.LoadBalancerSpecPrivate
	72,  // 64: proto.LoadBalancerMetadataCreatePrivate.labels:type_name -> proto.LoadBalancerMetadataCreatePrivate.LabelsEntry
	63,  // 65: proto.LoadBalancerUpdateStatusRequest.metadata:type_name -> proto.LoadBalancerIdReference
	66,  // 66: proto.LoadBalancerUpdateStatusRequest.status:type_name -> proto.LoadBalancerStatusPrivate
	61,  // 67: proto.LoadBalancerPrivate.metadata:type_name -> proto.LoadBalancerMetadataPrivate
	65,  // 68: proto.LoadBalancerPrivate.spec:type_name -> proto.LoadBalancerSpecPrivate
	66,  // 69: proto.LoadBalancerPrivate.status:type_name -> proto.LoadBalancerStatusPrivate
	73,  // 70: proto.LoadBalancerMetadataPrivate.labels:type_name -> proto.LoadBalancerMetadataPrivate.LabelsEntry
	76,  // 71: proto.LoadBalancerMetadataPrivate.creationTimestamp:type_name -> google.protobuf.Timestamp
	76,  // 72: proto.LoadBalancerMetadataPrivate.deletionTimestamp:type_name -> google.protobuf.Timestamp
	76,  // 73: proto.LoadBalancerMetadataPrivate.deletedTimestamp:type_name -> google.protobuf.Timestamp
	63,  // 74: proto.LoadBalancerRemoveFinalizerRequest.metadata:type_name -> proto.LoadBalancerIdReference
	86,  // 75: proto.LoadBalancerDeletePrivateRequest.metadata:type_name -> proto.LoadBalancerMetadataReference
	87,  // 76: proto.LoadBalancerSpecPrivate.listeners:type_name -> proto.LoadBalancerListener
	88,  // 77: proto.LoadBalancerSpecPrivate.security:type_name -> proto.LoadBalancerSecurity
	89,  // 78: proto.LoadBalancerStatusPrivate.conditions:type_name -> proto.LoadBalancerConditionsStatus
	90,  // 79: proto.LoadBalancerStatusPrivate.listeners:type_name -> proto.LoadBalancerListenerStatus
	6,   // 80: proto.InstancePrivateService.CreatePrivate:input_type -> proto.InstanceCreatePrivateRequest
	8,   // 81: proto.InstancePrivateService.CreateMultiplePrivate:input_type -> proto.InstanceCreateMultiplePrivateRequest
	11,  // 82: proto.InstancePrivateService.UpdatePrivate:input_type -> proto.InstanceUpdatePrivateRequest
	10,  // 83: proto.InstancePrivateService.UpdateStatus:input_type -> proto.InstanceUpdateStatusRequest
	17,  // 84: proto.InstancePrivateService.RemoveFinalizer:input_type -> proto.InstanceRemoveFinalizerRequest
	12,  // 85: proto.InstancePrivateService.SearchPrivate:input_type -> proto.InstanceSearchPrivateRequest
	14,  // 86: proto.InstancePrivateService.SearchStreamPrivate:input_type -> proto.InstanceSearchStreamPrivateRequest
	15,  // 87: proto.InstancePrivateService.Watch:input_type -> proto.InstanceWatchRequest
	91,  // 88: proto.InstancePrivateService.PingPrivate:input_type -> google.protobuf.Empty
	21,  // 89: proto.InstancePrivateService.DeletePrivate:input_type -> proto.InstanceDeletePrivateRequest
	26,  // 90: proto.InstanceGroupPrivateService.CreatePrivate:input_type -> proto.InstanceGroupCreatePrivateRequest
	31,  // 91: proto.InstanceSchedulingService.Schedule:input_type -> proto.ScheduleRequest
	91,  // 92: proto.InstanceSchedulingService.Ready:input_type -> google.protobuf.Empty
	91,  // 93: proto.InstanceSchedulingService.Ping:input_type -> google.protobuf.Empty
	91,  // 94: proto.InstanceSchedulingService.GetStatistics:input_type -> google.protobuf.Empty
	34,  // 95: proto.IpResourceManagerService.PutSubnet:input_type -> proto.CreateSubnetRequest
	36,  // 96: proto.IpResourceManagerService.DeleteSubnet:input_type -> proto.DeleteSubnetRequest
	37,  // 97: proto.IpResourceManagerService.SearchSubnetStream:input_type -> proto.SearchSubnetRequest
	38,  // 98: proto.IpResourceManagerService.ReserveSubnet:input_type -> proto.ReserveSubnetRequest
	39,  // 99: proto.IpResourceManagerService.ReleaseSubnet:input_type -> proto.ReleaseSubnetRequest
	42,  // 100: proto.IpResourceManagerService.ReserveAddress:input_type -> proto.ReserveAddressRequest
	43,  // 101: proto.IpResourceManagerService.ReleaseAddress:input_type -> proto.ReleaseAddressRequest
	91,  // 102: proto.IpResourceManagerService.GetSubnetStatistics:input_type -> google.protobuf.Empty
	91,  // 103: proto.IpResourceManagerService.Ping:input_type -> google.protobuf.Empty
	48,  // 104: proto.VNetPrivateService.ReserveSubnet:input_type -> proto.VNetReserveSubnetRequest
	49,  // 105: proto.VNetPrivateService.ReleaseSubnet:input_type -> proto.VNetReleaseSubnetRequest
	53,  // 106: proto.VNetPrivateService.ReserveAddress:input_type -> proto.VNetReserveAddressRequest
	54,  // 107: proto.VNetPrivateService.ReleaseAddress:input_type -> proto.VNetReleaseAddressRequest
	91,  // 108: proto.VNetPrivateService.PingPrivate:input_type -> google.protobuf.Empty
	57,  // 109: proto.LoadBalancerPrivateService.CreatePrivate:input_type -> proto.LoadBalancerCreatePrivateRequest
	59,  // 110: proto.LoadBalancerPrivateService.UpdateStatus:input_type -> proto.LoadBalancerUpdateStatusRequest
	62,  // 111: proto.LoadBalancerPrivateService.RemoveFinalizer:input_type -> proto.LoadBalancerRemoveFinalizerRequest
	91,  // 112: proto.LoadBalancerPrivateService.PingPrivate:input_type -> google.protobuf.Empty
	64,  // 113: proto.LoadBalancerPrivateService.DeletePrivate:input_type -> proto.LoadBalancerDeletePrivateRequest
	3,   // 114: proto.LoadBalancerPrivateService.SearchStreamPrivate:input_type -> proto.LoadBalancerSearchStreamPrivateRequest
	4,   // 115: proto.LoadBalancerPrivateService.Watch:input_type -> proto.LoadBalancerWatchRequest
	19,  // 116: proto.InstancePrivateService.CreatePrivate:output_type -> proto.InstancePrivate
	9,   // 117: proto.InstancePrivateService.CreateMultiplePrivate:output_type -> proto.InstanceCreateMultiplePrivateResponse
	91,  // 118: proto.InstancePrivateService.UpdatePrivate:output_type -> google.protobuf.Empty
	91,  // 119: proto.InstancePrivateService.UpdateStatus:output_type -> google.protobuf.Empty
	91,  // 120: proto.InstancePrivateService.RemoveFinalizer:output_type -> google.protobuf.Empty
	13,  // 121: proto.InstancePrivateService.SearchPrivate:output_type -> proto.InstanceSearchPrivateResponse
	16,  // 122: proto.InstancePrivateService.SearchStreamPrivate:output_type -> proto.InstanceWatchResponse
	16,  // 123: proto.InstancePrivateService.Watch:output_type -> proto.InstanceWatchResponse
	91,  // 124: proto.InstancePrivateService.PingPrivate:output_type -> google.protobuf.Empty
	91,  // 125: proto.InstancePrivateService.DeletePrivate:output_type -> google.protobuf.Empty
	30,  // 126: proto.InstanceGroupPrivateService.CreatePrivate:output_type -> proto.InstanceGroupPrivateCreateResponse
	32,  // 127: proto.InstanceSchedulingService.Schedule:output_type -> proto.ScheduleResponse
	91,  // 128: proto.InstanceSchedulingService.Ready:output_type -> google.protobuf.Empty
	91,  // 129: proto.InstanceSchedulingService.Ping:output_type -> google.protobuf.Empty
	92,  // 130: proto.InstanceSchedulingService.GetStatistics:output_type -> proto.SchedulerStatistics
	35,  // 131: proto.IpResourceManagerService.PutSubnet:output_type -> proto.CreateSubnetResponse
	91,  // 132: proto.IpResourceManagerService.DeleteSubnet:output_type -> google.protobuf.Empty
	41,  // 133: proto.IpResourceManagerService.SearchSubnetStream:output_type -> proto.Subnet
	41,  // 134: proto.IpResourceManagerService.ReserveSubnet:output_type -> proto.Subnet
	91,  // 135: proto.IpResourceManagerService.ReleaseSubnet:output_type -> google.protobuf.Empty
	45,  // 136: proto.IpResourceManagerService.ReserveAddress:output_type -> proto.ReserveAddressResponse
	91,  // 137: proto.IpResourceManagerService.ReleaseAddress:output_type -> google.protobuf.Empty
	47,  // 138: proto.IpResourceManagerService.GetSubnetStatistics:output_type -> proto.GetSubnetStatisticsResponse
	91,  // 139: proto.IpResourceManagerService.Ping:output_type -> google.protobuf.Empty
	51,  // 140: proto.VNetPrivateService.ReserveSubnet:output_type -> proto.VNetPrivate
	91,  // 141: proto.VNetPrivateService.ReleaseSubnet:output_type -> google.protobuf.Empty
	56,  // 142: proto.VNetPrivateService.ReserveAddress:output_type -> proto.VNetReserveAddressResponse
	91,  // 143: proto.VNetPrivateService.ReleaseAddress:output_type -> google.protobuf.Empty
	91,  // 144: proto.VNetPrivateService.PingPrivate:output_type -> google.protobuf.Empty
	60,  // 145: proto.LoadBalancerPrivateService.CreatePrivate:output_type -> proto.LoadBalancerPrivate
	91,  // 146: proto.LoadBalancerPrivateService.UpdateStatus:output_type -> google.protobuf.Empty
	91,  // 147: proto.LoadBalancerPrivateService.RemoveFinalizer:output_type -> google.protobuf.Empty
	91,  // 148: proto.LoadBalancerPrivateService.PingPrivate:output_type -> google.protobuf.Empty
	91,  // 149: proto.LoadBalancerPrivateService.DeletePrivate:output_type -> google.protobuf.Empty
	5,   // 150: proto.LoadBalancerPrivateService.SearchStreamPrivate:output_type -> proto.LoadBalancerWatchResponse
	5,   // 151: proto.LoadBalancerPrivateService.Watch:output_type -> proto.LoadBalancerWatchResponse
	116, // [116:152] is the sub-list for method output_type
	80,  // [80:116] is the sub-list for method input_type
	80,  // [80:80] is the sub-list for extension type_name
	80,  // [80:80] is the sub-list for extension extendee
	0,   // [0:80] is the sub-list for field type_name
}

func init() { file_compute_private_proto_init() }
func file_compute_private_proto_init() {
	if File_compute_private_proto != nil {
		return
	}
	file_annotations_proto_init()
	file_compute_proto_init()
	file_fleet_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_compute_private_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerSearchStreamPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceCreatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMetadataCreatePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceCreateMultiplePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceCreateMultiplePrivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceUpdateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceUpdatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSearchPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSearchPrivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSearchStreamPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceRemoveFinalizerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceIdReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMetadataPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceDeletePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSpecPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterfacePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInterfaceStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupCreatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupMetadataCreatePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupSpecPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupPrivateCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleInstanceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetStatisticsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetReserveSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetReleaseSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetSpecPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetReserveAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetReleaseAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetAddressReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetReserveAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerCreatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerMetadataCreatePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerUpdateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerMetadataPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerRemoveFinalizerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerIdReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerDeletePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerSpecPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveSubnetRequest_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_private_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetPrivate_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compute_private_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_compute_private_proto_goTypes,
		DependencyIndexes: file_compute_private_proto_depIdxs,
		EnumInfos:         file_compute_private_proto_enumTypes,
		MessageInfos:      file_compute_private_proto_msgTypes,
	}.Build()
	File_compute_private_proto = out.File
	file_compute_private_proto_rawDesc = nil
	file_compute_private_proto_goTypes = nil
	file_compute_private_proto_depIdxs = nil
}
