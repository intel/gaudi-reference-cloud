// Code generated by genbillingdriverproxy. DO NOT EDIT.
package server

import (
	"context"
	"errors"
	"github.com/golang/protobuf/ptypes/empty"
	"github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/log"
	"github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/pb"
	grpc "google.golang.org/grpc"
	"io"
)

type BillingDriver struct {
	name             string
	conn             *grpc.ClientConn
	billingOption    pb.BillingOptionServiceClient
	billingRate      pb.BillingRateServiceClient
	billingInvoice   pb.BillingInvoiceServiceClient
	payment          pb.PaymentServiceClient
	billingInstances pb.BillingInstancesServiceClient
}

func NewBillingDriver(name string, conn *grpc.ClientConn) *BillingDriver {
	return &BillingDriver{
		name:             name,
		conn:             conn,
		billingOption:    pb.NewBillingOptionServiceClient(conn),
		billingRate:      pb.NewBillingRateServiceClient(conn),
		billingInvoice:   pb.NewBillingInvoiceServiceClient(conn),
		payment:          pb.NewPaymentServiceClient(conn),
		billingInstances: pb.NewBillingInstancesServiceClient(conn),
	}
}

func RegisterProxies(grpcServer *grpc.Server) {
	pb.RegisterBillingOptionServiceServer(grpcServer, &BillingOptionServiceProxy{})
	pb.RegisterBillingRateServiceServer(grpcServer, &BillingRateServiceProxy{})
	pb.RegisterBillingInvoiceServiceServer(grpcServer, &BillingInvoiceServiceProxy{})
	pb.RegisterPaymentServiceServer(grpcServer, &PaymentServiceProxy{})
	pb.RegisterBillingInstancesServiceServer(grpcServer, &BillingInstancesServiceProxy{})
}

type BillingOptionServiceProxy struct {
	pb.UnimplementedBillingOptionServiceServer
}

func (_ *BillingOptionServiceProxy) Read(ctx context.Context, in *pb.BillingOptionFilter) (*pb.BillingOption, error) {
	logger := log.FromContext(ctx).WithName("BillingOptionServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return nil, err
	}
	res, err := driver.billingOption.Read(ctx, in)
	if err != nil {
		logger.Error(err, "calling Read")
		return nil, err
	}
	return res, err
}

type BillingRateServiceProxy struct {
	pb.UnimplementedBillingRateServiceServer
}

func (_ *BillingRateServiceProxy) Read(in *pb.BillingRateFilter, outStream pb.BillingRateService_ReadServer) error {
	ctx := outStream.Context()
	logger := log.FromContext(ctx).WithName("BillingRateServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return err
	}
	res, err := driver.billingRate.Read(ctx, in)
	if err != nil {
		logger.Error(err, "calling Read")
		return err
	}
	for {
		out, err := res.Recv()
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil
			}
			logger.Error(err, "recv error in Read")
			return err
		}
		send_err := outStream.Send(out)
		if send_err != nil {
			logger.Error(send_err, "send error in Read")
			return send_err
		}
	}
}

type BillingInvoiceServiceProxy struct {
	pb.UnimplementedBillingInvoiceServiceServer
}

func (_ *BillingInvoiceServiceProxy) Read(ctx context.Context, in *pb.BillingInvoiceFilter) (*pb.BillingInvoiceResponse, error) {
	logger := log.FromContext(ctx).WithName("BillingInvoiceServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return nil, err
	}
	res, err := driver.billingInvoice.Read(ctx, in)
	if err != nil {
		logger.Error(err, "calling Read")
		return nil, err
	}
	return res, err
}

func (_ *BillingInvoiceServiceProxy) ReadDetail(in *pb.InvoiceId, outStream pb.BillingInvoiceService_ReadDetailServer) error {
	ctx := outStream.Context()
	logger := log.FromContext(ctx).WithName("BillingInvoiceServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return err
	}
	res, err := driver.billingInvoice.ReadDetail(ctx, in)
	if err != nil {
		logger.Error(err, "calling ReadDetail")
		return err
	}
	for {
		out, err := res.Recv()
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil
			}
			logger.Error(err, "recv error in ReadDetail")
			return err
		}
		send_err := outStream.Send(out)
		if send_err != nil {
			logger.Error(send_err, "send error in ReadDetail")
			return send_err
		}
	}
}

func (_ *BillingInvoiceServiceProxy) ReadUnbilled(in *pb.BillingAccount, outStream pb.BillingInvoiceService_ReadUnbilledServer) error {
	ctx := outStream.Context()
	logger := log.FromContext(ctx).WithName("BillingInvoiceServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return err
	}
	res, err := driver.billingInvoice.ReadUnbilled(ctx, in)
	if err != nil {
		logger.Error(err, "calling ReadUnbilled")
		return err
	}
	for {
		out, err := res.Recv()
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil
			}
			logger.Error(err, "recv error in ReadUnbilled")
			return err
		}
		send_err := outStream.Send(out)
		if send_err != nil {
			logger.Error(send_err, "send error in ReadUnbilled")
			return send_err
		}
	}
}

func (_ *BillingInvoiceServiceProxy) ReadStatement(ctx context.Context, in *pb.InvoiceId) (*pb.Statement, error) {
	logger := log.FromContext(ctx).WithName("BillingInvoiceServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return nil, err
	}
	res, err := driver.billingInvoice.ReadStatement(ctx, in)
	if err != nil {
		logger.Error(err, "calling ReadStatement")
		return nil, err
	}
	return res, err
}

type PaymentServiceProxy struct {
	pb.UnimplementedPaymentServiceServer
}

func (_ *PaymentServiceProxy) AddPaymentPreProcessing(ctx context.Context, in *pb.PrePaymentRequest) (*pb.PrePaymentResponse, error) {
	logger := log.FromContext(ctx).WithName("PaymentServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return nil, err
	}
	res, err := driver.payment.AddPaymentPreProcessing(ctx, in)
	if err != nil {
		logger.Error(err, "calling AddPaymentPreProcessing")
		return nil, err
	}
	return res, err
}

func (_ *PaymentServiceProxy) AddPaymentPostProcessing(ctx context.Context, in *pb.PostPaymentRequest) (*empty.Empty, error) {
	logger := log.FromContext(ctx).WithName("PaymentServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return nil, err
	}
	res, err := driver.payment.AddPaymentPostProcessing(ctx, in)
	if err != nil {
		logger.Error(err, "calling AddPaymentPostProcessing")
		return nil, err
	}
	return res, err
}

type BillingInstancesServiceProxy struct {
	pb.UnimplementedBillingInstancesServiceServer
}

func (_ *BillingInstancesServiceProxy) Read(ctx context.Context, in *pb.BillingPaidInstanceFilter) (*pb.BillingPaidInstanceResponse, error) {
	logger := log.FromContext(ctx).WithName("BillingInstancesServiceProxy")
	driver, err := GetDriver(ctx, in.GetCloudAccountId())
	if err != nil {
		logger.Error(err, "unable to find driver", "cloudAccountId", in.GetCloudAccountId())
		return nil, err
	}
	res, err := driver.billingInstances.Read(ctx, in)
	if err != nil {
		logger.Error(err, "calling Read")
		return nil, err
	}
	return res, err
}
