#!/usr/bin/env bash
#
# Start Bazel remote cache.
# This listens on localhost and is only available from the host that it is running on.
# It is intended to cache Bazel build and test results in Jenkins executors or development workstations.
#
# https://github.com/buchgr/bazel-remote/
# https://bazel.build/remote/caching
#
set -e

LOCAL_BAZEL_REMOTE_CACHE_HTTP_PORT=${LOCAL_BAZEL_REMOTE_CACHE_HTTP_PORT:-5002}
LOCAL_BAZEL_REMOTE_CACHE_GRPC_PORT=${LOCAL_BAZEL_REMOTE_CACHE_GRPC_PORT:-5003}
LOCAL_BAZEL_REMOTE_CACHE_NAME=${LOCAL_BAZEL_REMOTE_CACHE_NAME:-bazel-remote-cache}
# To override this value for your environment, add to /build/environments/${HOSTNAME}/Makefile.environment.
LOCAL_BAZEL_REMOTE_CACHE_SIZE_GB=${LOCAL_BAZEL_REMOTE_CACHE_SIZE_GB:-50}
LOCAL_BAZEL_REMOTE_CACHE_REQUIRED=${LOCAL_BAZEL_REMOTE_CACHE_REQUIRED:-0}

# https://hub.docker.com/layers/buchgr/bazel-remote-cache/v2.4.3/images/sha256-b304b70f456d8cad89339630e2d4919a7195109940abfdd11095dce74335f945?context=explore
BAZEL_REMOTE_CACHE_IMAGE=amr-idc-registry.infra-host.com/cache/buchgr/bazel-remote-cache@sha256:b304b70f456d8cad89339630e2d4919a7195109940abfdd11095dce74335f945

run_with_retry() {
    local attempts=$1
    local sleep=$2
    shift 2
    for i in $(seq 1 ${attempts}); do
        [ $i -gt 1 ] && echo Failed. Will retry in ${sleep} seconds... && sleep ${sleep}
        "$@" && s=0 && break || s=$?
    done
    return $s
}

start_bazel_remote_cache() {
    if [ -n "$(docker ps -f name=bazel-remote-cache -f status=running --quiet)" ]; then
        echo start-bazel-remote-cache.sh: Using existing ${LOCAL_BAZEL_REMOTE_CACHE_NAME}
    else
        echo start-bazel-remote-cache.sh: Starting ${LOCAL_BAZEL_REMOTE_CACHE_NAME}
        # Create volume if it does not exist.
        docker volume create "${LOCAL_BAZEL_REMOTE_CACHE_NAME}" || true
        docker run \
            -d \
            --restart=always \
            -p "127.0.0.1:${LOCAL_BAZEL_REMOTE_CACHE_HTTP_PORT}:8080" \
            -p "127.0.0.1:${LOCAL_BAZEL_REMOTE_CACHE_GRPC_PORT}:9092" \
            -v "${LOCAL_BAZEL_REMOTE_CACHE_NAME}:/data" \
            --name "${LOCAL_BAZEL_REMOTE_CACHE_NAME}" \
            ${BAZEL_REMOTE_CACHE_IMAGE} \
            --max_size ${LOCAL_BAZEL_REMOTE_CACHE_SIZE_GB}
    fi
}

# Wait for Bazel remote cache to be healthy.
# If it doesn't become healthy, disable it.
# The remote cache setting that should be used by Bazel is written to the file local/BAZEL_REMOTE_CACHE_OPTS.
write_bazel_remote_cache_opts() {
    echo start-bazel-remote-cache.sh: Waiting for http://127.0.0.1:${LOCAL_BAZEL_REMOTE_CACHE_HTTP_PORT}/status to report success
    mkdir -p local
    if HTTP_PROXY= http_proxy= run_with_retry 5 1 curl --silent --fail --max-time 2 http://127.0.0.1:${LOCAL_BAZEL_REMOTE_CACHE_HTTP_PORT}/status ; then
        local remote_cache=grpc://127.0.0.1:${LOCAL_BAZEL_REMOTE_CACHE_GRPC_PORT}
        echo start-bazel-remote-cache.sh: Using remote cache ${remote_cache}
        echo "# Generated by $0" > local/BAZEL_REMOTE_CACHE_OPTS
        for command in aquery build clean coverage info print_action query run test; do
            echo "${command} --remote_cache=${remote_cache}" >> local/BAZEL_REMOTE_CACHE_OPTS
        done

    elif [ "${LOCAL_BAZEL_REMOTE_CACHE_REQUIRED}" == "0" ]; then
        echo start-bazel-remote-cache.sh: Remote cache disabled because it is unreachable or unhealthy.
        echo "" > local/BAZEL_REMOTE_CACHE_OPTS
    else
        echo start-bazel-remote-cache.sh: Remote cache is unreachable or unhealthy.
        exit 1
    fi
}

start_bazel_remote_cache
write_bazel_remote_cache_opts
