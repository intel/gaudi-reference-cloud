# An Ansible playbook demonstrating how to deploy a number of instances on IDC VMaaS.

- name: Prepare infrastructure
  gather_facts: false
  hosts: localhost
  vars:
    namespace: "my-project-123456"
    cluster_name: "cluster"
    num_workers: 3
    ssh_proxy_host: "10.165.62.252"
    ssh_proxy_user: "guest"
    force_clean: false

  tasks:

    - name: Calculate worker names
      set_fact:
        worker_names: "{{ [cluster_name + '-worker-'] | product(range(0,num_workers)) | map('join') | list }}"
      
    - name: Show worker names
      ansible.builtin.debug:
        var: "worker_names"

    - name: Create Kubernetes namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: present

    - name: Delete worker instances
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: cloud.intel.com/v1alpha1
          kind: Instance
          metadata:
            name: "{{ item }}"
            namespace: "{{ namespace }}"
        wait: yes
      loop: "{{ worker_names }}"
      when: "force_clean | bool"

    - name: Create SshPublicKey object
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cloud.intel.com/v1alpha1
          kind: SshPublicKey
          metadata:
            name: "{{ cluster_name }}"
            namespace: "{{ namespace }}"
          spec:
            sshPublicKey: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Create worker instances
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cloud.intel.com/v1alpha1
          kind: Instance
          metadata:
            name: "{{ item }}"
            namespace: "{{ namespace }}"
          spec:
            instanceType: tiny
            machineImage: ubuntu-22.04
            sshPublicKeyNames:
              - "{{ cluster_name }}"
        # TODO: wait for condition
      loop: "{{ worker_names }}"

    - name: Get worker instance details
      kubernetes.core.k8s_info:
        api_version: cloud.intel.com/v1alpha1
        kind: Instance
        name: "{{ item }}"
        namespace: "{{ namespace }}"        
      register: worker_instances
      # TODO: Use condition instead of until
      until: "worker_instances.resources[0].status.phase == 'Running'"
      retries: 60
      delay: 5
      loop: "{{ worker_names }}"

    - name: Add workers to Ansible inventory
      add_host:
        hostname: "{{ item.resources[0].metadata.name }}"
        ansible_host: "{{ item.resources[0].status.interfaces[0].addresses[0] }}"
        ansible_ssh_common_args: "-J {{ ssh_proxy_user }}@{{ ssh_proxy_host }}"
        groupname:
          - workers
      loop: "{{ worker_instances.results }}"

- name: Wait for workers
  gather_facts: false
  hosts: workers
  remote_user: ubuntu
  tasks:
    - name: Wait for SSH connection to workers
      ansible.builtin.wait_for_connection:

- name: Configure workers
  gather_facts: true
  hosts: workers
  remote_user: ubuntu
  tasks:

    - ansible.builtin.debug:
        var: ansible_facts

    - name: Show host info
      shell: "hostname -f ; ip address"
      register: command_output

    - ansible.builtin.debug:
        var: command_output.stdout_lines

    - name: Update /etc/hosts
      become: true
      lineinfile:
        dest: "/etc/hosts"
        regexp: ".*{{ item }}$"
        line: "{{ hostvars[item].ansible_default_ipv4.address }} {{item}}"
        state: present
      when: "hostvars[item].ansible_default_ipv4.address is defined"
      with_items: "{{ groups['all'] }}"

    - name: Show /etc/hosts
      shell: "cat /etc/hosts"
      register: command_output

    - ansible.builtin.debug:
        var: command_output.stdout_lines

