# INTEL CONFIDENTIAL
# Copyright (C) 2023 Intel Corporation
module(
    name = "sds-controller",
    version = "1.0.0",
)

bazel_dep(name = "rules_go", version = "0.51.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.40.0", repo_name = "bazel_gazelle")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "protobuf", version = "29.2", repo_name = "com_google_protobuf")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "aspect_bazel_lib", version = "2.10.0")
bazel_dep(name = "rules_oci", version = "2.2.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "container_structure_test", version = "1.16.0")
bazel_dep(name = "hermetic_cc_toolchain", version = "2.1.3")
bazel_dep(name = "rules_buf", version = "0.2.0")
bazel_dep(name = "rules_python", version = "1.0.0")
bazel_dep(name = "aspect_rules_lint", version = "0.12.0")
bazel_dep(name = "buildifier_prebuilt", version = "6.4.0")
bazel_dep(name = "rules_oci_helpers")
bazel_dep(name = "toolchains_llvm", version = "1.0.0")

git_override(
    module_name = "rules_oci_helpers",
    commit = "b645bd45b4936e08bde29d210b37b2c02aca9326",
    remote = "https://github.com/yoks/oci-rules-helpers",
)

zig_toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(zig_toolchains, "zig_sdk")

# To directly use a commit from GitHub, replace commit with the commit you want.
# Otherwise, omit this block.
git_override(
    module_name = "toolchains_llvm",
    commit = "329910897f3114f3f5d24407d9abf49b244056d2",
    remote = "https://github.com/bazel-contrib/toolchains_llvm",
)

# Configure and register the toolchain.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_versions = {
        "darwin-aarch64": "17.0.6",
        "darwin-x86_64": "17.0.6",
    },
)
use_repo(llvm, "llvm_toolchain")
# use_repo(llvm, "llvm_toolchain_llvm") # if you depend on specific tools in scripts

register_toolchains("@llvm_toolchain//:all")

register_toolchains(
    "@zig_sdk//toolchain:linux_amd64_gnu.2.28",
    "@zig_sdk//toolchain:linux_arm64_gnu.2.28",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.11",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pypi")

GOOGLE_APIS_VERSION = "64926d52febbf298cb82a8f472ade4a3969ba922"

bazel_dep(name = "googleapis", version = GOOGLE_APIS_VERSION)
archive_override(
    module_name = "googleapis",
    integrity = "sha256-nRqTDnZ8k8glOYuPhpLso/41O5qq3t+88fyiKCyF34g=",
    patch_strip = 1,
    patches = [
        "bazel/patches/googleapos_add_bzlmod_support.patch",
    ],
    strip_prefix = "googleapis-" + GOOGLE_APIS_VERSION,
    urls = [
        "https://github.com/googleapis/googleapis/archive/%s.zip" % GOOGLE_APIS_VERSION,
    ],
)

switched_rules = use_extension("@googleapis//:extensions.bzl", "switched_rules")
switched_rules.use_languages()
use_repo(switched_rules, "com_google_googleapis_imports")

non_module_dependencies = use_extension("//:extensions.bzl", "non_module_dependencies")
use_repo(non_module_dependencies, "grpc_ecosystem_grpc_gateway")
use_repo(non_module_dependencies, "com_github_bazelbuild_buildtools")
use_repo(non_module_dependencies, "weka_openapi")
use_repo(non_module_dependencies, "com_github_bufbuild_protovalidate")

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    name = "go_sdk",
    urls = [
        "https://dl.google.com/go/{}",
        "https://go.dev/dl/{}",
        "https://golang.org/dl/{}",
    ],
    version = "1.23.4",
)
use_repo(go_sdk, "go_sdk")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "build_buf_gen_go_bufbuild_protovalidate_protocolbuffers_go",
    "com_github_bufbuild_protovalidate_go",
    "com_github_deepmap_oapi_codegen_v2",
    "com_github_getkin_kin_openapi",
    "com_github_google_uuid",
    "com_github_grpc_ecosystem_go_grpc_middleware_providers_prometheus",
    "com_github_grpc_ecosystem_go_grpc_middleware_v2",
    "com_github_labstack_echo_v4",
    "com_github_lestrrat_go_jwx",
    "com_github_minio_kes",
    "com_github_minio_madmin_go_v3",
    "com_github_minio_minio_go_v7",
    "com_github_oapi_codegen_echo_middleware",
    "com_github_oapi_codegen_runtime",
    "com_github_prometheus_client_golang",
    "com_github_rs_zerolog",
    "com_github_stretchr_testify",
    "in_gopkg_yaml_v3",
    "io_k6_go_k6",
    "org_golang_google_genproto_googleapis_api",
    "org_golang_google_genproto_googleapis_rpc",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_exp",
    "org_golang_x_text",
    "org_golang_x_tools",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:proto disable",
    ],
    path = "go.k6.io/k6",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:proto disable",
    ],
    path = "google.golang.org/protobuf",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:proto disable",
    ],
    path = "github.com/minio/kes",
)
go_deps.module_override(
    patch_strip = 1,
    patches = ["//:bazel/patches/kes.patch"],
    path = "github.com/minio/kes",
)

# ToDo figure out why we even need this patch
go_deps.module_override(
    patch_strip = 1,
    patches = ["//:bazel/patches/x6k_browser.patch"],
    path = "github.com/grafana/xk6-browser",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:go_naming_convention go_default_library",
    ],
    path = "github.com/google/cel-go",
)

go_sdk.nogo(
    excludes = [
        "@//api/intel:__subpackages__",
        "@//ci/k6:__subpackages__",
        "@//ci/linters:__subpackages__",
        "@//services/storage_controller/pkg/backend/weka/client:__subpackages__",
        "@//services/storage_controller/pkg/backend/vast/client:__subpackages__",
    ],
    includes = ["@//:__subpackages__"],
    nogo = "//:nogo",
)

# Distroless image

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_base",
    digest = "sha256:0a93daa199e7c6e387cea8cf03fac676146735caf6965d276d86ebd3a441f27e",
    image = "gcr.io/distroless/base-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64_v8", "distroless_base_linux_arm_v7", "distroless_base_linux_ppc64le", "distroless_base_linux_s390x")

# Buf
buf = use_extension("@rules_buf//buf:extensions.bzl", "buf")
use_repo(buf, "rules_buf_toolchains")
