pipeline {
  environment {
    REGISTRY = "internal-placeholder.com"
    PROJECT = "intelcloud"
    HTTP_PROXY = "http://internal-placeholder.com:911"
    HTTPS_PROXY = "http://internal-placeholder.com:912"
    NO_PROXY = ".intel.com,intel.com,localhost,127.0.0.1"
    APP_VERSION = "0.1.0"
    }
  agent  {
    label 'bmaas'
  }
  stages {
    stage('Build IDCS Admin portal Docker Image and push it to Harbor registry - DEV') {
      agent {
          label 'bmaas'
        }
      when {
          not {
              branch 'main'
          }
          beforeAgent true
      }  
      steps{
        dir("${env.WORKSPACE}/idcs_admin_portal"){
          script {
            withDockerRegistry(credentialsId: 'sys_idccicd', url: "https://${REGISTRY}/${PROJECT}/") {
                def tagVersion = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                def devImage = docker.build(
                    "${REGISTRY}/${PROJECT}/idcs-admin-portal:dev-${APP_VERSION}-${tagVersion}",
                    "--build-arg http_proxy=${HTTP_PROXY} --build-arg https_proxy=${HTTPs_PROXY} --build-arg no_proxy=${NO_PROXY}  --force-rm --no-cache -f deployment/Dockerfile .."
                    )
                devImage.push()
                sh "docker rmi ${REGISTRY}/${PROJECT}/idcs-admin-portal:dev-${APP_VERSION}-${tagVersion}"
            }
          }
        }
      }
    }

    stage('Build IDCS Admin portal Docker Image and push it to Harbor registry') {
      agent {
          label 'bmaas'
        }
      when {
            beforeAgent true
            branch 'main'
      }  
      steps{
        dir("${env.WORKSPACE}/idcs_admin_portal"){
          script {
            withDockerRegistry(credentialsId: 'sys_idccicd', url: "https://${REGISTRY}/${PROJECT}/") {
                def tagVersion = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                def devImage = docker.build(
                    "${REGISTRY}/${PROJECT}/idcs-admin-portal:dev-${APP_VERSION}-${tagVersion}",
                    "--build-arg http_proxy=${HTTP_PROXY} --build-arg https_proxy=${HTTPs_PROXY} --build-arg no_proxy=${NO_PROXY}  --force-rm --no-cache -f deployment/Dockerfile .."
                    )
                devImage.push()
                sh "docker rmi ${REGISTRY}/${PROJECT}/idcs-admin-portal:dev-${APP_VERSION}-${tagVersion}"
            }
          }
        }
      }
    }

    stage('Package IDCS Admin portal Helm chart and push it to Harbor registry') {
      agent {
        docker{
          image "${REGISTRY}/${PROJECT}/ub22-04-helm:1.4"
          registryUrl "https://${REGISTRY}"
          registryCredentialsId 'sys_idccicd'
          args '-u root --network host'
          label 'bmaas'
        }
      }
      steps {
        dir("${env.WORKSPACE}/idcs_admin_portal"){
            withCredentials([usernamePassword(credentialsId: 'sys_idccicd', usernameVariable: 'HARBOR_USERNAME', passwordVariable: 'HARBOR_PASSWORD')]){
                sh '''
                VERSION=$( git rev-parse --short HEAD )
                chmod +x idcs_admin_portal_helm.sh
                ./idcs_admin_portal_helm.sh ${VERSION} ${REGISTRY} ${PROJECT} ${HARBOR_USERNAME} ${HARBOR_PASSWORD}
                '''

          }
        }
      }
    }
  }
  post {
    always {
      cleanWs()
    }
  }
}
